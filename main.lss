
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ae  00800060  00000f34  00000fc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080020e  0080020e  00001176  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00001176  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000204  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001073  00000000  00000000  0000139a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000240  00000000  00000000  0000240d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001132  00000000  00000000  0000264d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00003780  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000215  00000000  00000000  000038f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000072b  00000000  00000000  00003b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001f8  00000000  00000000  00004230  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ae 30       	cpi	r26, 0x0E	; 14
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	12 e0       	ldi	r17, 0x02	; 2
  78:	ae e0       	ldi	r26, 0x0E	; 14
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 31       	cpi	r26, 0x1B	; 27
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 53 07 	call	0xea6	; 0xea6 <main>
  8a:	0c 94 98 07 	jmp	0xf30	; 0xf30 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyfind>:

unsigned char colloc, rowloc;


char keyfind()
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
	while(1)
	{
		KEY_DDR = 0xF0;
  96:	00 ef       	ldi	r16, 0xF0	; 240
		KEY_PRT = 0xFF;
  98:	1f ef       	ldi	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	40 e4       	ldi	r20, 0x40	; 64
  9c:	5c e9       	ldi	r21, 0x9C	; 156
			
			_delay_ms (40);							//20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
		}while(colloc == 0x0F);

		KEY_PRT = 0xEF;
  9e:	28 ec       	ldi	r18, 0xC8	; 200
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	bf ee       	ldi	r27, 0xEF	; 239
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xDF;
  a4:	af ed       	ldi	r26, 0xDF	; 223
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xBF;
  a6:	7f eb       	ldi	r23, 0xBF	; 191
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0x7F;
  a8:	6f e7       	ldi	r22, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;
  aa:	04 bb       	out	0x14, r16	; 20
		KEY_PRT = 0xFF;
  ac:	15 bb       	out	0x15, r17	; 21

		do
		{
			KEY_PRT &= 0x0F;
  ae:	85 b3       	in	r24, 0x15	; 21
  b0:	8f 70       	andi	r24, 0x0F	; 15
  b2:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
  b4:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
  b6:	83 b3       	in	r24, 0x13	; 19
		}while(colloc != 0x0F);
  b8:	8f 70       	andi	r24, 0x0F	; 15
  ba:	8f 30       	cpi	r24, 0x0F	; 15
  bc:	c1 f7       	brne	.-16     	; 0xae <keyfind+0x1c>
  be:	ca 01       	movw	r24, r20
  c0:	01 97       	sbiw	r24, 0x01	; 1
  c2:	f1 f7       	brne	.-4      	; 0xc0 <keyfind+0x2e>
		do
		{
			do
			{
				_delay_ms(20);						//20ms key debounce time
				colloc = (KEY_PIN & 0x0F);
  c4:	83 b3       	in	r24, 0x13	; 19
			}while(colloc == 0x0F);
  c6:	8f 70       	andi	r24, 0x0F	; 15
  c8:	8f 30       	cpi	r24, 0x0F	; 15
  ca:	c9 f3       	breq	.-14     	; 0xbe <keyfind+0x2c>
  cc:	80 e9       	ldi	r24, 0x90	; 144
  ce:	91 e0       	ldi	r25, 0x01	; 1
  d0:	f9 01       	movw	r30, r18
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <keyfind+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d9 f7       	brne	.-10     	; 0xd0 <keyfind+0x3e>
			
			_delay_ms (40);							//20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
  da:	83 b3       	in	r24, 0x13	; 19
		}while(colloc == 0x0F);
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	8f 30       	cpi	r24, 0x0F	; 15
  e0:	71 f3       	breq	.-36     	; 0xbe <keyfind+0x2c>

		KEY_PRT = 0xEF;
  e2:	b5 bb       	out	0x15, r27	; 21
		asm("NOP");
  e4:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
  e6:	83 b3       	in	r24, 0x13	; 19
  e8:	8f 70       	andi	r24, 0x0F	; 15
		if(colloc != 0x0F)
  ea:	8f 30       	cpi	r24, 0x0F	; 15
  ec:	29 f0       	breq	.+10     	; 0xf8 <keyfind+0x66>
  ee:	80 93 14 02 	sts	0x0214, r24
		{
			rowloc = 0;
  f2:	10 92 19 02 	sts	0x0219, r1
  f6:	20 c0       	rjmp	.+64     	; 0x138 <keyfind+0xa6>
			break;
		}

		KEY_PRT = 0xDF;
  f8:	a5 bb       	out	0x15, r26	; 21
		asm("NOP");
  fa:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
  fc:	83 b3       	in	r24, 0x13	; 19
  fe:	8f 70       	andi	r24, 0x0F	; 15
		if(colloc != 0x0F)
 100:	8f 30       	cpi	r24, 0x0F	; 15
 102:	21 f0       	breq	.+8      	; 0x10c <keyfind+0x7a>
 104:	80 93 14 02 	sts	0x0214, r24
		{
			rowloc = 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	14 c0       	rjmp	.+40     	; 0x134 <keyfind+0xa2>
			break;
		}
		
		KEY_PRT = 0xBF;
 10c:	75 bb       	out	0x15, r23	; 21
		asm("NOP");
 10e:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 110:	83 b3       	in	r24, 0x13	; 19
 112:	8f 70       	andi	r24, 0x0F	; 15
		if(colloc != 0x0F)
 114:	8f 30       	cpi	r24, 0x0F	; 15
 116:	21 f0       	breq	.+8      	; 0x120 <keyfind+0x8e>
 118:	80 93 14 02 	sts	0x0214, r24
		{
			rowloc = 2;
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	0a c0       	rjmp	.+20     	; 0x134 <keyfind+0xa2>
			break;
		}

		KEY_PRT = 0x7F;
 120:	65 bb       	out	0x15, r22	; 21
		asm("NOP");
 122:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
 124:	83 b3       	in	r24, 0x13	; 19
 126:	8f 70       	andi	r24, 0x0F	; 15
		if(colloc != 0x0F)
 128:	8f 30       	cpi	r24, 0x0F	; 15
 12a:	09 f4       	brne	.+2      	; 0x12e <keyfind+0x9c>
 12c:	be cf       	rjmp	.-132    	; 0xaa <keyfind+0x18>
 12e:	80 93 14 02 	sts	0x0214, r24
		{
			rowloc = 3;
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	80 93 19 02 	sts	0x0219, r24
			break;
		}
	}

	
	if(colloc == 0x0E)
 138:	80 91 14 02 	lds	r24, 0x0214
 13c:	8e 30       	cpi	r24, 0x0E	; 14
 13e:	51 f4       	brne	.+20     	; 0x154 <keyfind+0xc2>
	return(keypad[rowloc][0]);
 140:	e0 91 19 02 	lds	r30, 0x0219
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	ee 0f       	add	r30, r30
 14c:	ff 1f       	adc	r31, r31
 14e:	e3 51       	subi	r30, 0x13	; 19
 150:	fe 4f       	sbci	r31, 0xFE	; 254
 152:	18 c0       	rjmp	.+48     	; 0x184 <keyfind+0xf2>
	
	else if(colloc == 0x0D)
 154:	8d 30       	cpi	r24, 0x0D	; 13
 156:	59 f4       	brne	.+22     	; 0x16e <keyfind+0xdc>
	return(keypad[rowloc][1]);
 158:	e0 91 19 02 	lds	r30, 0x0219
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	ee 0f       	add	r30, r30
 160:	ff 1f       	adc	r31, r31
 162:	ee 0f       	add	r30, r30
 164:	ff 1f       	adc	r31, r31
 166:	e3 51       	subi	r30, 0x13	; 19
 168:	fe 4f       	sbci	r31, 0xFE	; 254
 16a:	81 81       	ldd	r24, Z+1	; 0x01
 16c:	15 c0       	rjmp	.+42     	; 0x198 <keyfind+0x106>
 16e:	e0 91 19 02 	lds	r30, 0x0219
	
	else if(colloc == 0x0B)
 172:	8b 30       	cpi	r24, 0x0B	; 11
 174:	49 f4       	brne	.+18     	; 0x188 <keyfind+0xf6>
	return(keypad[rowloc][2]);
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	ee 0f       	add	r30, r30
 17a:	ff 1f       	adc	r31, r31
 17c:	ee 0f       	add	r30, r30
 17e:	ff 1f       	adc	r31, r31
 180:	e1 51       	subi	r30, 0x11	; 17
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	80 81       	ld	r24, Z
 186:	08 c0       	rjmp	.+16     	; 0x198 <keyfind+0x106>
	
	else
	return(keypad[rowloc][3]);
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	ee 0f       	add	r30, r30
 18c:	ff 1f       	adc	r31, r31
 18e:	ee 0f       	add	r30, r30
 190:	ff 1f       	adc	r31, r31
 192:	e3 51       	subi	r30, 0x13	; 19
 194:	fe 4f       	sbci	r31, 0xFE	; 254
 196:	83 81       	ldd	r24, Z+3	; 0x03
}
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <LCD_Command>:
void LCD_String(char *str);
void LCD_Clear();

void LCD_Command(unsigned char cmnd)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd & 0xf0);		/* SEND COMMAND TO DATA PORT */
 19e:	98 b3       	in	r25, 0x18	; 24
 1a0:	28 2f       	mov	r18, r24
 1a2:	20 7f       	andi	r18, 0xF0	; 240
 1a4:	9f 70       	andi	r25, 0x0F	; 15
 1a6:	29 2b       	or	r18, r25
 1a8:	28 bb       	out	0x18, r18	; 24
	LCD_DPRT &= ~ (1<<LCD_RS);						/* RS = 0 FOR COMMAND */
 1aa:	c0 98       	cbi	0x18, 0	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
 1ac:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ae:	22 e0       	ldi	r18, 0x02	; 2
 1b0:	92 2f       	mov	r25, r18
 1b2:	9a 95       	dec	r25
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <LCD_Command+0x14>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 1b6:	c1 98       	cbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1b8:	e8 ec       	ldi	r30, 0xC8	; 200
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	31 97       	sbiw	r30, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <LCD_Command+0x1e>
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(cmnd << 4);		/* SEND COMMAND TO DATA PORT */
 1c0:	98 b3       	in	r25, 0x18	; 24
 1c2:	82 95       	swap	r24
 1c4:	80 7f       	andi	r24, 0xF0	; 240
 1c6:	9f 70       	andi	r25, 0x0F	; 15
 1c8:	98 2b       	or	r25, r24
 1ca:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN = 1 FOR H TO L PULSE */
 1cc:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ce:	2a 95       	dec	r18
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_Command+0x30>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 1d2:	c1 98       	cbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1d4:	80 ea       	ldi	r24, 0xA0	; 160
 1d6:	9f e0       	ldi	r25, 0x0F	; 15
 1d8:	01 97       	sbiw	r24, 0x01	; 1
 1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCD_Command+0x3a>
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE */
}
 1dc:	08 95       	ret

000001de <LCD_Char>:

void LCD_Char(unsigned char data)
{
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data & 0xf0);		/* SEND DATA TO DATA PORT */
 1de:	98 b3       	in	r25, 0x18	; 24
 1e0:	28 2f       	mov	r18, r24
 1e2:	20 7f       	andi	r18, 0xF0	; 240
 1e4:	9f 70       	andi	r25, 0x0F	; 15
 1e6:	29 2b       	or	r18, r25
 1e8:	28 bb       	out	0x18, r18	; 24
	LCD_DPRT |= (1<<LCD_RS);						/* MAKE RS = 1 FOR DATA */
 1ea:	c0 9a       	sbi	0x18, 0	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE */
 1ec:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ee:	22 e0       	ldi	r18, 0x02	; 2
 1f0:	92 2f       	mov	r25, r18
 1f2:	9a 95       	dec	r25
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <LCD_Char+0x14>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE */
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE */
 1f6:	c1 98       	cbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f8:	e8 ec       	ldi	r30, 0xC8	; 200
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	31 97       	sbiw	r30, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <LCD_Char+0x1e>
	_delay_us(100);									/* WAIT FOR MAKE ENABLE WIDE */
	
	LCD_DPRT = (LCD_DPRT & 0x0f)|(data << 4);		/*  */
 200:	98 b3       	in	r25, 0x18	; 24
 202:	82 95       	swap	r24
 204:	80 7f       	andi	r24, 0xF0	; 240
 206:	9f 70       	andi	r25, 0x0F	; 15
 208:	98 2b       	or	r25, r24
 20a:	98 bb       	out	0x18, r25	; 24
	LCD_DPRT |= (1<<LCD_EN);						/* EN=0 FOR H TO L PULSE*/
 20c:	c1 9a       	sbi	0x18, 1	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 20e:	2a 95       	dec	r18
 210:	f1 f7       	brne	.-4      	; 0x20e <LCD_Char+0x30>
	_delay_us(1);									/* WAIT FOR MAKE ENABLE WIDE*/
	LCD_DPRT &= ~(1<<LCD_EN);						/* EN = 0 FOR H TO L PULSE*/
 212:	c1 98       	cbi	0x18, 1	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 214:	80 ea       	ldi	r24, 0xA0	; 160
 216:	9f e0       	ldi	r25, 0x0F	; 15
 218:	01 97       	sbiw	r24, 0x01	; 1
 21a:	f1 f7       	brne	.-4      	; 0x218 <LCD_Char+0x3a>
	_delay_us(2000);								/* WAIT FOR MAKE ENABLE WIDE*/
}
 21c:	08 95       	ret

0000021e <LCD_Init>:

void LCD_Init()
{
	LCD_DDDR = 0xFF;
 21e:	8f ef       	ldi	r24, 0xFF	; 255
 220:	87 bb       	out	0x17, r24	; 23
 222:	80 e4       	ldi	r24, 0x40	; 64
 224:	9c e9       	ldi	r25, 0x9C	; 156
 226:	01 97       	sbiw	r24, 0x01	; 1
 228:	f1 f7       	brne	.-4      	; 0x226 <LCD_Init+0x8>
	_delay_ms(20);									/* WAIT FOR SOME TIME */
	LCD_Command(0x02);								/* SEND $32 FOR INIT OT 0X02 */
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Command>
	LCD_Command(0x28);								/* INIT. LCD 2 LINE, 5 X 7 MATRIX */
 230:	88 e2       	ldi	r24, 0x28	; 40
 232:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Command>
	LCD_Command(0x0C);								/* DISPLAY ON CURSOR ON */
 236:	8c e0       	ldi	r24, 0x0C	; 12
 238:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Command>
	LCD_Command(0x01);								/* LCD CLEAR */
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Command>
	LCD_Command(0x82);								/* SHIFT CURSOR TO WRITE */
 242:	82 e8       	ldi	r24, 0x82	; 130
 244:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Command>
}
 248:	08 95       	ret

0000024a <LCD_String>:
	
	LCD_String(str);								/* Call LCD string function */
}

void LCD_String(char *str)
{
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	ec 01       	movw	r28, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <LCD_String+0xc>
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
	{
		LCD_Char (str[i]);							/* Call LCD data write */
 252:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_Char>
}

void LCD_String(char *str)
{
	int i;
	for(i=0;str[i]!=0;i++)							/* Send each char of string till the NULL */
 256:	89 91       	ld	r24, Y+
 258:	88 23       	and	r24, r24
 25a:	d9 f7       	brne	.-10     	; 0x252 <LCD_String+0x8>
	{
		LCD_Char (str[i]);							/* Call LCD data write */
	}
}
 25c:	df 91       	pop	r29
 25e:	cf 91       	pop	r28
 260:	08 95       	ret

00000262 <LCD_String_xy>:
	LCD_Command(0x01);								/* LCD CLEAR */
	LCD_Command(0x82);								/* SHIFT CURSOR TO WRITE */
}

void LCD_String_xy(unsigned char row, unsigned char pos, char *str)
{
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	ea 01       	movw	r28, r20
	if (row == 1)
 268:	81 30       	cpi	r24, 0x01	; 1
 26a:	21 f4       	brne	.+8      	; 0x274 <LCD_String_xy+0x12>
		LCD_Command((pos & 0x0F)|0x80);				/* Command of first row and required position<16 */
 26c:	6f 70       	andi	r22, 0x0F	; 15
 26e:	86 2f       	mov	r24, r22
 270:	80 68       	ori	r24, 0x80	; 128
 272:	05 c0       	rjmp	.+10     	; 0x27e <LCD_String_xy+0x1c>
	else if (row == 2)
 274:	82 30       	cpi	r24, 0x02	; 2
 276:	29 f4       	brne	.+10     	; 0x282 <LCD_String_xy+0x20>
		LCD_Command((pos & 0x0F)|0xC0);				/* Command of Second row and required position<16 */
 278:	6f 70       	andi	r22, 0x0F	; 15
 27a:	86 2f       	mov	r24, r22
 27c:	80 6c       	ori	r24, 0xC0	; 192
 27e:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Command>
	
	LCD_String(str);								/* Call LCD string function */
 282:	ce 01       	movw	r24, r28
 284:	0e 94 25 01 	call	0x24a	; 0x24a <LCD_String>
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	08 95       	ret

0000028e <lcd_clear>:
	}
}

void lcd_clear()
{
	LCD_Command(0x01);
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Command>
 294:	80 e7       	ldi	r24, 0x70	; 112
 296:	97 e1       	ldi	r25, 0x17	; 23
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <lcd_clear+0xa>
	_delay_ms(3);
	LCD_Command(0x80);
 29c:	80 e8       	ldi	r24, 0x80	; 128
 29e:	0e 94 cf 00 	call	0x19e	; 0x19e <LCD_Command>
}
 2a2:	08 95       	ret

000002a4 <key>:
	}
	
}

void key(){
	pw = keyfind();
 2a4:	0e 94 49 00 	call	0x92	; 0x92 <keyfind>
 2a8:	80 93 1a 02 	sts	0x021A, r24
}
 2ac:	08 95       	ret

000002ae <password>:

void password(){

	LCD_String_xy(1,0,"Enter Password ");
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	40 e6       	ldi	r20, 0x60	; 96
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	key();
 2ba:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
	
	if(pw != "" && i < 4 && pw != 'A' && pw != 'B' && pw != 'D' && pw != '*' && pw != '#' && pw != 'C'){
 2be:	80 91 1a 02 	lds	r24, 0x021A
 2c2:	28 2f       	mov	r18, r24
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	20 37       	cpi	r18, 0x70	; 112
 2ca:	39 07       	cpc	r19, r25
 2cc:	41 f1       	breq	.+80     	; 0x31e <password+0x70>
 2ce:	60 91 0e 02 	lds	r22, 0x020E
 2d2:	70 91 0f 02 	lds	r23, 0x020F
 2d6:	64 30       	cpi	r22, 0x04	; 4
 2d8:	71 05       	cpc	r23, r1
 2da:	08 f5       	brcc	.+66     	; 0x31e <password+0x70>
 2dc:	81 34       	cpi	r24, 0x41	; 65
 2de:	f9 f0       	breq	.+62     	; 0x31e <password+0x70>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	e9 f0       	breq	.+58     	; 0x31e <password+0x70>
 2e4:	84 34       	cpi	r24, 0x44	; 68
 2e6:	d9 f0       	breq	.+54     	; 0x31e <password+0x70>
 2e8:	8a 32       	cpi	r24, 0x2A	; 42
 2ea:	c9 f0       	breq	.+50     	; 0x31e <password+0x70>
 2ec:	83 32       	cpi	r24, 0x23	; 35
 2ee:	b9 f0       	breq	.+46     	; 0x31e <password+0x70>
 2f0:	83 34       	cpi	r24, 0x43	; 67
 2f2:	a9 f0       	breq	.+42     	; 0x31e <password+0x70>
		LCD_String_xy(2,i,"*");
 2f4:	82 e0       	ldi	r24, 0x02	; 2
 2f6:	41 e7       	ldi	r20, 0x71	; 113
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		epw[i] = pw;
 2fe:	80 91 0e 02 	lds	r24, 0x020E
 302:	90 91 0f 02 	lds	r25, 0x020F
 306:	fc 01       	movw	r30, r24
 308:	e0 5f       	subi	r30, 0xF0	; 240
 30a:	fd 4f       	sbci	r31, 0xFD	; 253
 30c:	20 91 1a 02 	lds	r18, 0x021A
 310:	20 83       	st	Z, r18
		i++;
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	90 93 0f 02 	sts	0x020F, r25
 318:	80 93 0e 02 	sts	0x020E, r24
 31c:	08 95       	ret
	}else if(pw != " " && pw == 'C'){
 31e:	23 57       	subi	r18, 0x73	; 115
 320:	30 40       	sbci	r19, 0x00	; 0
 322:	d9 f0       	breq	.+54     	; 0x35a <password+0xac>
 324:	83 34       	cpi	r24, 0x43	; 67
 326:	c9 f4       	brne	.+50     	; 0x35a <password+0xac>
		i--;
 328:	60 91 0e 02 	lds	r22, 0x020E
 32c:	70 91 0f 02 	lds	r23, 0x020F
 330:	61 50       	subi	r22, 0x01	; 1
 332:	70 40       	sbci	r23, 0x00	; 0
 334:	70 93 0f 02 	sts	0x020F, r23
 338:	60 93 0e 02 	sts	0x020E, r22
		LCD_String_xy(2,i," ");
 33c:	82 e0       	ldi	r24, 0x02	; 2
 33e:	43 e7       	ldi	r20, 0x73	; 115
 340:	50 e0       	ldi	r21, 0x00	; 0
 342:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		if(i>10){i=0;}
 346:	80 91 0e 02 	lds	r24, 0x020E
 34a:	90 91 0f 02 	lds	r25, 0x020F
 34e:	0b 97       	sbiw	r24, 0x0b	; 11
 350:	20 f0       	brcs	.+8      	; 0x35a <password+0xac>
 352:	10 92 0f 02 	sts	0x020F, r1
 356:	10 92 0e 02 	sts	0x020E, r1
 35a:	08 95       	ret

0000035c <check_status>:
	}
}

void check_status(){
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29

	LCD_Init();
 360:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
 364:	02 c0       	rjmp	.+4      	; 0x36a <check_status+0xe>
	
	while(i<4){
		password();
 366:	0e 94 57 01 	call	0x2ae	; 0x2ae <password>

void check_status(){

	LCD_Init();
	
	while(i<4){
 36a:	80 91 0e 02 	lds	r24, 0x020E
 36e:	90 91 0f 02 	lds	r25, 0x020F
 372:	04 97       	sbiw	r24, 0x04	; 4
 374:	c0 f3       	brcs	.-16     	; 0x366 <check_status+0xa>
 376:	c8 ec       	ldi	r28, 0xC8	; 200
 378:	d0 e0       	ldi	r29, 0x00	; 0
		password();
	}
	while(1){
		key();
 37a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		if(pw != " " && epw[0] == cpw[0] && epw[1] == cpw[1] && epw[2] == cpw[2] && epw[3] == cpw[3] && pw == 'A'){
 37e:	20 91 1a 02 	lds	r18, 0x021A
 382:	82 2f       	mov	r24, r18
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	83 57       	subi	r24, 0x73	; 115
 388:	90 40       	sbci	r25, 0x00	; 0
 38a:	b9 f3       	breq	.-18     	; 0x37a <check_status+0x1e>
 38c:	90 91 10 02 	lds	r25, 0x0210
 390:	80 91 fd 01 	lds	r24, 0x01FD
 394:	98 17       	cp	r25, r24
 396:	69 f5       	brne	.+90     	; 0x3f2 <check_status+0x96>
 398:	90 91 11 02 	lds	r25, 0x0211
 39c:	80 91 fe 01 	lds	r24, 0x01FE
 3a0:	98 17       	cp	r25, r24
 3a2:	39 f5       	brne	.+78     	; 0x3f2 <check_status+0x96>
 3a4:	90 91 12 02 	lds	r25, 0x0212
 3a8:	80 91 ff 01 	lds	r24, 0x01FF
 3ac:	98 17       	cp	r25, r24
 3ae:	09 f5       	brne	.+66     	; 0x3f2 <check_status+0x96>
 3b0:	90 91 13 02 	lds	r25, 0x0213
 3b4:	80 91 00 02 	lds	r24, 0x0200
 3b8:	98 17       	cp	r25, r24
 3ba:	d9 f4       	brne	.+54     	; 0x3f2 <check_status+0x96>
 3bc:	21 34       	cpi	r18, 0x41	; 65
 3be:	e9 f6       	brne	.-70     	; 0x37a <check_status+0x1e>
			LCD_Init();
 3c0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Door Opened ");
 3c4:	81 e0       	ldi	r24, 0x01	; 1
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	45 e7       	ldi	r20, 0x75	; 117
 3ca:	50 e0       	ldi	r21, 0x00	; 0
 3cc:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			DDRB=0xff;
 3d0:	8f ef       	ldi	r24, 0xFF	; 255
 3d2:	87 bb       	out	0x17, r24	; 23
			PORTB=0x01;
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	88 bb       	out	0x18, r24	; 24
 3d8:	80 e5       	ldi	r24, 0x50	; 80
 3da:	93 ec       	ldi	r25, 0xC3	; 195
 3dc:	28 ec       	ldi	r18, 0xC8	; 200
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	f9 01       	movw	r30, r18
 3e2:	31 97       	sbiw	r30, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <check_status+0x86>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3e8:	d9 f7       	brne	.-10     	; 0x3e0 <check_status+0x84>
			_delay_ms(5000);
			PORTB=0x00;
 3ea:	18 ba       	out	0x18, r1	; 24
			LCD_String_xy(1,0,"ReEnter Password ");
			i=0;
			check_status();	
		}
	}
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret
			DDRB=0xff;
			PORTB=0x01;
			_delay_ms(5000);
			PORTB=0x00;
			break;
		}else if(pw != " " && pw == 'A'){
 3f2:	21 34       	cpi	r18, 0x41	; 65
 3f4:	09 f0       	breq	.+2      	; 0x3f8 <check_status+0x9c>
 3f6:	c1 cf       	rjmp	.-126    	; 0x37a <check_status+0x1e>
			LCD_Init();
 3f8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Wrong Password ");
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	42 e8       	ldi	r20, 0x82	; 130
 402:	50 e0       	ldi	r21, 0x00	; 0
 404:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			LCD_String_xy(2,0,"ReEnter Password ");
 408:	82 e0       	ldi	r24, 0x02	; 2
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	42 e9       	ldi	r20, 0x92	; 146
 40e:	50 e0       	ldi	r21, 0x00	; 0
 410:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 414:	80 e1       	ldi	r24, 0x10	; 16
 416:	97 e2       	ldi	r25, 0x27	; 39
 418:	fe 01       	movw	r30, r28
 41a:	31 97       	sbiw	r30, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <check_status+0xbe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 41e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 420:	d9 f7       	brne	.-10     	; 0x418 <check_status+0xbc>
			_delay_ms(1000);
			LCD_Init();
 422:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"ReEnter Password ");
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	60 e0       	ldi	r22, 0x00	; 0
 42a:	42 e9       	ldi	r20, 0x92	; 146
 42c:	50 e0       	ldi	r21, 0x00	; 0
 42e:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			i=0;
 432:	10 92 0f 02 	sts	0x020F, r1
 436:	10 92 0e 02 	sts	0x020E, r1
			check_status();	
 43a:	0e 94 ae 01 	call	0x35c	; 0x35c <check_status>
 43e:	9d cf       	rjmp	.-198    	; 0x37a <check_status+0x1e>

00000440 <reset_password_check2>:
	}
} 

void reset_password_check2(){

	LCD_Init();
 440:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Re-Enter New");
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	60 e0       	ldi	r22, 0x00	; 0
 448:	44 ea       	ldi	r20, 0xA4	; 164
 44a:	50 e0       	ldi	r21, 0x00	; 0
 44c:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	LCD_String_xy(2,0,"Password ");
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	41 eb       	ldi	r20, 0xB1	; 177
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 45c:	80 e1       	ldi	r24, 0x10	; 16
 45e:	97 e2       	ldi	r25, 0x27	; 39
 460:	28 ec       	ldi	r18, 0xC8	; 200
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	f9 01       	movw	r30, r18
 466:	31 97       	sbiw	r30, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <reset_password_check2+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 46a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 46c:	d9 f7       	brne	.-10     	; 0x464 <reset_password_check2+0x24>
	_delay_ms(1000);
	LCD_Init();
 46e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"New Password");
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	60 e0       	ldi	r22, 0x00	; 0
 476:	4b eb       	ldi	r20, 0xBB	; 187
 478:	50 e0       	ldi	r21, 0x00	; 0
 47a:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>

	while(1){

		key();
 47e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		
		if(pw != "" && i < 4 && pw != 'A' && pw != 'B' && pw != 'D' && pw != '*' && pw != '#' && pw != 'C'){
 482:	80 91 1a 02 	lds	r24, 0x021A
 486:	28 2f       	mov	r18, r24
 488:	30 e0       	ldi	r19, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	20 37       	cpi	r18, 0x70	; 112
 48e:	39 07       	cpc	r19, r25
 490:	41 f1       	breq	.+80     	; 0x4e2 <reset_password_check2+0xa2>
 492:	60 91 0e 02 	lds	r22, 0x020E
 496:	70 91 0f 02 	lds	r23, 0x020F
 49a:	64 30       	cpi	r22, 0x04	; 4
 49c:	71 05       	cpc	r23, r1
 49e:	08 f5       	brcc	.+66     	; 0x4e2 <reset_password_check2+0xa2>
 4a0:	81 34       	cpi	r24, 0x41	; 65
 4a2:	f9 f0       	breq	.+62     	; 0x4e2 <reset_password_check2+0xa2>
 4a4:	82 34       	cpi	r24, 0x42	; 66
 4a6:	e9 f0       	breq	.+58     	; 0x4e2 <reset_password_check2+0xa2>
 4a8:	84 34       	cpi	r24, 0x44	; 68
 4aa:	d9 f0       	breq	.+54     	; 0x4e2 <reset_password_check2+0xa2>
 4ac:	8a 32       	cpi	r24, 0x2A	; 42
 4ae:	c9 f0       	breq	.+50     	; 0x4e2 <reset_password_check2+0xa2>
 4b0:	83 32       	cpi	r24, 0x23	; 35
 4b2:	b9 f0       	breq	.+46     	; 0x4e2 <reset_password_check2+0xa2>
 4b4:	83 34       	cpi	r24, 0x43	; 67
 4b6:	a9 f0       	breq	.+42     	; 0x4e2 <reset_password_check2+0xa2>
			LCD_String_xy(2,i,"*");
 4b8:	82 e0       	ldi	r24, 0x02	; 2
 4ba:	41 e7       	ldi	r20, 0x71	; 113
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			epw[i] = pw;
 4c2:	80 91 0e 02 	lds	r24, 0x020E
 4c6:	90 91 0f 02 	lds	r25, 0x020F
 4ca:	fc 01       	movw	r30, r24
 4cc:	e0 5f       	subi	r30, 0xF0	; 240
 4ce:	fd 4f       	sbci	r31, 0xFD	; 253
 4d0:	20 91 1a 02 	lds	r18, 0x021A
 4d4:	20 83       	st	Z, r18
			i++;
 4d6:	01 96       	adiw	r24, 0x01	; 1
 4d8:	90 93 0f 02 	sts	0x020F, r25
 4dc:	80 93 0e 02 	sts	0x020E, r24
 4e0:	ce cf       	rjmp	.-100    	; 0x47e <reset_password_check2+0x3e>
		}else if(pw != " " && pw == 'C'){
 4e2:	23 57       	subi	r18, 0x73	; 115
 4e4:	30 40       	sbci	r19, 0x00	; 0
 4e6:	59 f2       	breq	.-106    	; 0x47e <reset_password_check2+0x3e>
 4e8:	83 34       	cpi	r24, 0x43	; 67
 4ea:	d9 f4       	brne	.+54     	; 0x522 <reset_password_check2+0xe2>
			i--;
 4ec:	60 91 0e 02 	lds	r22, 0x020E
 4f0:	70 91 0f 02 	lds	r23, 0x020F
 4f4:	61 50       	subi	r22, 0x01	; 1
 4f6:	70 40       	sbci	r23, 0x00	; 0
 4f8:	70 93 0f 02 	sts	0x020F, r23
 4fc:	60 93 0e 02 	sts	0x020E, r22
			LCD_String_xy(2,i," ");
 500:	82 e0       	ldi	r24, 0x02	; 2
 502:	43 e7       	ldi	r20, 0x73	; 115
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			if(i>10){i=0;}
 50a:	80 91 0e 02 	lds	r24, 0x020E
 50e:	90 91 0f 02 	lds	r25, 0x020F
 512:	0b 97       	sbiw	r24, 0x0b	; 11
 514:	08 f4       	brcc	.+2      	; 0x518 <reset_password_check2+0xd8>
 516:	b3 cf       	rjmp	.-154    	; 0x47e <reset_password_check2+0x3e>
 518:	10 92 0f 02 	sts	0x020F, r1
 51c:	10 92 0e 02 	sts	0x020E, r1
 520:	ae cf       	rjmp	.-164    	; 0x47e <reset_password_check2+0x3e>
		}else if (pw != " " && pw == 'A' && i==4){
 522:	81 34       	cpi	r24, 0x41	; 65
 524:	09 f0       	breq	.+2      	; 0x528 <reset_password_check2+0xe8>
 526:	ab cf       	rjmp	.-170    	; 0x47e <reset_password_check2+0x3e>
 528:	80 91 0e 02 	lds	r24, 0x020E
 52c:	90 91 0f 02 	lds	r25, 0x020F
 530:	04 97       	sbiw	r24, 0x04	; 4
 532:	09 f0       	breq	.+2      	; 0x536 <reset_password_check2+0xf6>
 534:	a4 cf       	rjmp	.-184    	; 0x47e <reset_password_check2+0x3e>
		break;
		}
	}
}
 536:	08 95       	ret

00000538 <reset_password_check1>:
	}
}

void reset_password_check1(){

	LCD_Init();
 538:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Enter New");
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	48 ec       	ldi	r20, 0xC8	; 200
 542:	50 e0       	ldi	r21, 0x00	; 0
 544:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	LCD_String_xy(2,0,"Password ");
 548:	82 e0       	ldi	r24, 0x02	; 2
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	41 eb       	ldi	r20, 0xB1	; 177
 54e:	50 e0       	ldi	r21, 0x00	; 0
 550:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 554:	80 e1       	ldi	r24, 0x10	; 16
 556:	97 e2       	ldi	r25, 0x27	; 39
 558:	28 ec       	ldi	r18, 0xC8	; 200
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	f9 01       	movw	r30, r18
 55e:	31 97       	sbiw	r30, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <reset_password_check1+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 562:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 564:	d9 f7       	brne	.-10     	; 0x55c <reset_password_check1+0x24>
	_delay_ms(1000);
	LCD_Init();
 566:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"New Password");
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	60 e0       	ldi	r22, 0x00	; 0
 56e:	4b eb       	ldi	r20, 0xBB	; 187
 570:	50 e0       	ldi	r21, 0x00	; 0
 572:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	
	i=0;
 576:	10 92 0f 02 	sts	0x020F, r1
 57a:	10 92 0e 02 	sts	0x020E, r1

	while(1){
		key();
 57e:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		
		if(pw != "" && i < 4 && pw != 'A' && pw != 'B' && pw != 'D' && pw != '*' && pw != '#' && pw != 'C'){
 582:	80 91 1a 02 	lds	r24, 0x021A
 586:	28 2f       	mov	r18, r24
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	20 37       	cpi	r18, 0x70	; 112
 58e:	39 07       	cpc	r19, r25
 590:	41 f1       	breq	.+80     	; 0x5e2 <reset_password_check1+0xaa>
 592:	60 91 0e 02 	lds	r22, 0x020E
 596:	70 91 0f 02 	lds	r23, 0x020F
 59a:	64 30       	cpi	r22, 0x04	; 4
 59c:	71 05       	cpc	r23, r1
 59e:	08 f5       	brcc	.+66     	; 0x5e2 <reset_password_check1+0xaa>
 5a0:	81 34       	cpi	r24, 0x41	; 65
 5a2:	f9 f0       	breq	.+62     	; 0x5e2 <reset_password_check1+0xaa>
 5a4:	82 34       	cpi	r24, 0x42	; 66
 5a6:	e9 f0       	breq	.+58     	; 0x5e2 <reset_password_check1+0xaa>
 5a8:	84 34       	cpi	r24, 0x44	; 68
 5aa:	d9 f0       	breq	.+54     	; 0x5e2 <reset_password_check1+0xaa>
 5ac:	8a 32       	cpi	r24, 0x2A	; 42
 5ae:	c9 f0       	breq	.+50     	; 0x5e2 <reset_password_check1+0xaa>
 5b0:	83 32       	cpi	r24, 0x23	; 35
 5b2:	b9 f0       	breq	.+46     	; 0x5e2 <reset_password_check1+0xaa>
 5b4:	83 34       	cpi	r24, 0x43	; 67
 5b6:	a9 f0       	breq	.+42     	; 0x5e2 <reset_password_check1+0xaa>
			LCD_String_xy(2,i,"*");
 5b8:	82 e0       	ldi	r24, 0x02	; 2
 5ba:	41 e7       	ldi	r20, 0x71	; 113
 5bc:	50 e0       	ldi	r21, 0x00	; 0
 5be:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			rpw[i] = pw;
 5c2:	80 91 0e 02 	lds	r24, 0x020E
 5c6:	90 91 0f 02 	lds	r25, 0x020F
 5ca:	fc 01       	movw	r30, r24
 5cc:	eb 5e       	subi	r30, 0xEB	; 235
 5ce:	fd 4f       	sbci	r31, 0xFD	; 253
 5d0:	20 91 1a 02 	lds	r18, 0x021A
 5d4:	20 83       	st	Z, r18
			i++;
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	90 93 0f 02 	sts	0x020F, r25
 5dc:	80 93 0e 02 	sts	0x020E, r24
 5e0:	ce cf       	rjmp	.-100    	; 0x57e <reset_password_check1+0x46>
		}else if(pw != " " && pw == 'C'){
 5e2:	23 57       	subi	r18, 0x73	; 115
 5e4:	30 40       	sbci	r19, 0x00	; 0
 5e6:	59 f2       	breq	.-106    	; 0x57e <reset_password_check1+0x46>
 5e8:	83 34       	cpi	r24, 0x43	; 67
 5ea:	b9 f4       	brne	.+46     	; 0x61a <reset_password_check1+0xe2>
			i--;
 5ec:	60 91 0e 02 	lds	r22, 0x020E
 5f0:	70 91 0f 02 	lds	r23, 0x020F
 5f4:	61 50       	subi	r22, 0x01	; 1
 5f6:	70 40       	sbci	r23, 0x00	; 0
 5f8:	70 93 0f 02 	sts	0x020F, r23
 5fc:	60 93 0e 02 	sts	0x020E, r22
			LCD_String_xy(2,i," ");
 600:	82 e0       	ldi	r24, 0x02	; 2
 602:	43 e7       	ldi	r20, 0x73	; 115
 604:	50 e0       	ldi	r21, 0x00	; 0
 606:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			if(i>10){i=0;}
 60a:	80 91 0e 02 	lds	r24, 0x020E
 60e:	90 91 0f 02 	lds	r25, 0x020F
 612:	0b 97       	sbiw	r24, 0x0b	; 11
 614:	08 f4       	brcc	.+2      	; 0x618 <reset_password_check1+0xe0>
 616:	b3 cf       	rjmp	.-154    	; 0x57e <reset_password_check1+0x46>
 618:	ae cf       	rjmp	.-164    	; 0x576 <reset_password_check1+0x3e>
		}else if (pw != " " && pw == 'A' && i==4){
 61a:	81 34       	cpi	r24, 0x41	; 65
 61c:	09 f0       	breq	.+2      	; 0x620 <reset_password_check1+0xe8>
 61e:	af cf       	rjmp	.-162    	; 0x57e <reset_password_check1+0x46>
 620:	80 91 0e 02 	lds	r24, 0x020E
 624:	90 91 0f 02 	lds	r25, 0x020F
 628:	04 97       	sbiw	r24, 0x04	; 4
 62a:	09 f0       	breq	.+2      	; 0x62e <reset_password_check1+0xf6>
 62c:	a8 cf       	rjmp	.-176    	; 0x57e <reset_password_check1+0x46>
		i=0;
 62e:	10 92 0f 02 	sts	0x020F, r1
 632:	10 92 0e 02 	sts	0x020E, r1
		reset_password_check2();
 636:	0e 94 20 02 	call	0x440	; 0x440 <reset_password_check2>
		break;
		} 
	}
} 
 63a:	08 95       	ret

0000063c <reset_password_check>:
		break;
		}
	}
}

void reset_password_check(){
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	c8 ec       	ldi	r28, 0xC8	; 200
 642:	d0 e0       	ldi	r29, 0x00	; 0

	reset_password_check1();
 644:	0e 94 9c 02 	call	0x538	; 0x538 <reset_password_check1>
	
	if(pw != " " && epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] && pw == 'A'){
 648:	20 91 1a 02 	lds	r18, 0x021A
 64c:	82 2f       	mov	r24, r18
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	83 57       	subi	r24, 0x73	; 115
 652:	90 40       	sbci	r25, 0x00	; 0
 654:	09 f4       	brne	.+2      	; 0x658 <reset_password_check+0x1c>
 656:	64 c0       	rjmp	.+200    	; 0x720 <reset_password_check+0xe4>
 658:	50 91 10 02 	lds	r21, 0x0210
 65c:	80 91 15 02 	lds	r24, 0x0215
 660:	58 17       	cp	r21, r24
 662:	d1 f5       	brne	.+116    	; 0x6d8 <reset_password_check+0x9c>
 664:	40 91 11 02 	lds	r20, 0x0211
 668:	80 91 16 02 	lds	r24, 0x0216
 66c:	48 17       	cp	r20, r24
 66e:	a1 f5       	brne	.+104    	; 0x6d8 <reset_password_check+0x9c>
 670:	30 91 12 02 	lds	r19, 0x0212
 674:	80 91 17 02 	lds	r24, 0x0217
 678:	38 17       	cp	r19, r24
 67a:	71 f5       	brne	.+92     	; 0x6d8 <reset_password_check+0x9c>
 67c:	90 91 13 02 	lds	r25, 0x0213
 680:	80 91 18 02 	lds	r24, 0x0218
 684:	98 17       	cp	r25, r24
 686:	41 f5       	brne	.+80     	; 0x6d8 <reset_password_check+0x9c>
 688:	21 34       	cpi	r18, 0x41	; 65
 68a:	09 f0       	breq	.+2      	; 0x68e <reset_password_check+0x52>
 68c:	49 c0       	rjmp	.+146    	; 0x720 <reset_password_check+0xe4>
		unsigned j=0;
		for(j=0;j<4;j++){
			cpw[j] = rpw[j];
 68e:	50 93 fd 01 	sts	0x01FD, r21
 692:	40 93 fe 01 	sts	0x01FE, r20
 696:	30 93 ff 01 	sts	0x01FF, r19
 69a:	90 93 00 02 	sts	0x0200, r25
		}
		LCD_Init();
 69e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"Password Reset");
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	42 ed       	ldi	r20, 0xD2	; 210
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,0,"Done ");
 6ae:	82 e0       	ldi	r24, 0x02	; 2
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	41 ee       	ldi	r20, 0xE1	; 225
 6b4:	50 e0       	ldi	r21, 0x00	; 0
 6b6:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		DDRB=0xff;
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	87 bb       	out	0x17, r24	; 23
		PORTB=0x01;
 6be:	81 e0       	ldi	r24, 0x01	; 1
 6c0:	88 bb       	out	0x18, r24	; 24
 6c2:	80 e3       	ldi	r24, 0x30	; 48
 6c4:	95 e7       	ldi	r25, 0x75	; 117
 6c6:	28 ec       	ldi	r18, 0xC8	; 200
 6c8:	30 e0       	ldi	r19, 0x00	; 0
 6ca:	f9 01       	movw	r30, r18
 6cc:	31 97       	sbiw	r30, 0x01	; 1
 6ce:	f1 f7       	brne	.-4      	; 0x6cc <reset_password_check+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 6d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 6d2:	d9 f7       	brne	.-10     	; 0x6ca <reset_password_check+0x8e>
		_delay_ms(3000);
		PORTB=0x00;
 6d4:	18 ba       	out	0x18, r1	; 24
 6d6:	24 c0       	rjmp	.+72     	; 0x720 <reset_password_check+0xe4>
	}
	else if(pw != " " && pw == 'A'){
 6d8:	21 34       	cpi	r18, 0x41	; 65
 6da:	11 f5       	brne	.+68     	; 0x720 <reset_password_check+0xe4>
		LCD_Init();
 6dc:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"Wrong New");
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	47 ee       	ldi	r20, 0xE7	; 231
 6e6:	50 e0       	ldi	r21, 0x00	; 0
 6e8:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,0,"ReEnter Password ");
 6ec:	82 e0       	ldi	r24, 0x02	; 2
 6ee:	60 e0       	ldi	r22, 0x00	; 0
 6f0:	42 e9       	ldi	r20, 0x92	; 146
 6f2:	50 e0       	ldi	r21, 0x00	; 0
 6f4:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 6f8:	80 e3       	ldi	r24, 0x30	; 48
 6fa:	95 e7       	ldi	r25, 0x75	; 117
 6fc:	fe 01       	movw	r30, r28
 6fe:	31 97       	sbiw	r30, 0x01	; 1
 700:	f1 f7       	brne	.-4      	; 0x6fe <reset_password_check+0xc2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 702:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 704:	d9 f7       	brne	.-10     	; 0x6fc <reset_password_check+0xc0>
		_delay_ms(3000);
		LCD_Init();
 706:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"ReEnter Password ");
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	60 e0       	ldi	r22, 0x00	; 0
 70e:	42 e9       	ldi	r20, 0x92	; 146
 710:	50 e0       	ldi	r21, 0x00	; 0
 712:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		i=0;
 716:	10 92 0f 02 	sts	0x020F, r1
 71a:	10 92 0e 02 	sts	0x020E, r1
 71e:	92 cf       	rjmp	.-220    	; 0x644 <reset_password_check+0x8>
		reset_password_check();;
	}

}
 720:	df 91       	pop	r29
 722:	cf 91       	pop	r28
 724:	08 95       	ret

00000726 <user1>:
			break;
		} 
	}
}

void user1(){
 726:	cf 93       	push	r28
 728:	df 93       	push	r29

	LCD_Init();
 72a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
 72e:	02 c0       	rjmp	.+4      	; 0x734 <user1+0xe>
	
	while(i<4){
		password();
 730:	0e 94 57 01 	call	0x2ae	; 0x2ae <password>

void user1(){

	LCD_Init();
	
	while(i<4){
 734:	80 91 0e 02 	lds	r24, 0x020E
 738:	90 91 0f 02 	lds	r25, 0x020F
 73c:	04 97       	sbiw	r24, 0x04	; 4
 73e:	c0 f3       	brcs	.-16     	; 0x730 <user1+0xa>
 740:	c8 ec       	ldi	r28, 0xC8	; 200
 742:	d0 e0       	ldi	r29, 0x00	; 0
		password();
	}
	while(1){
		key();
 744:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		if(pw != " " && epw[0] == user1cpw[0] && epw[1] == user1cpw[1] && epw[2] == user1cpw[2] && epw[3] == user1cpw[3]){
 748:	80 91 1a 02 	lds	r24, 0x021A
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	83 57       	subi	r24, 0x73	; 115
 750:	90 40       	sbci	r25, 0x00	; 0
 752:	89 f1       	breq	.+98     	; 0x7b6 <user1+0x90>
 754:	90 91 10 02 	lds	r25, 0x0210
 758:	80 91 05 02 	lds	r24, 0x0205
 75c:	98 17       	cp	r25, r24
 75e:	59 f5       	brne	.+86     	; 0x7b6 <user1+0x90>
 760:	90 91 11 02 	lds	r25, 0x0211
 764:	80 91 06 02 	lds	r24, 0x0206
 768:	98 17       	cp	r25, r24
 76a:	29 f5       	brne	.+74     	; 0x7b6 <user1+0x90>
 76c:	90 91 12 02 	lds	r25, 0x0212
 770:	80 91 07 02 	lds	r24, 0x0207
 774:	98 17       	cp	r25, r24
 776:	f9 f4       	brne	.+62     	; 0x7b6 <user1+0x90>
 778:	90 91 13 02 	lds	r25, 0x0213
 77c:	80 91 08 02 	lds	r24, 0x0208
 780:	98 17       	cp	r25, r24
 782:	c9 f4       	brne	.+50     	; 0x7b6 <user1+0x90>
			LCD_Init();
 784:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Door Opened ");
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	60 e0       	ldi	r22, 0x00	; 0
 78c:	45 e7       	ldi	r20, 0x75	; 117
 78e:	50 e0       	ldi	r21, 0x00	; 0
 790:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			DDRB=0xff;
 794:	8f ef       	ldi	r24, 0xFF	; 255
 796:	87 bb       	out	0x17, r24	; 23
			PORTB=0x01;
 798:	81 e0       	ldi	r24, 0x01	; 1
 79a:	88 bb       	out	0x18, r24	; 24
 79c:	80 e5       	ldi	r24, 0x50	; 80
 79e:	93 ec       	ldi	r25, 0xC3	; 195
 7a0:	28 ec       	ldi	r18, 0xC8	; 200
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	f9 01       	movw	r30, r18
 7a6:	31 97       	sbiw	r30, 0x01	; 1
 7a8:	f1 f7       	brne	.-4      	; 0x7a6 <user1+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7aa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7ac:	d9 f7       	brne	.-10     	; 0x7a4 <user1+0x7e>
			_delay_ms(5000);
			PORTB=0x00;
 7ae:	18 ba       	out	0x18, r1	; 24
			LCD_String_xy(1,0,"ReEnter Password ");
			i=0;
			user1();	
		}
	}
}
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	08 95       	ret
			PORTB=0x01;
			_delay_ms(5000);
			PORTB=0x00;
			break;
		}else {
			LCD_Init();
 7b6:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Wrong Password ");
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	42 e8       	ldi	r20, 0x82	; 130
 7c0:	50 e0       	ldi	r21, 0x00	; 0
 7c2:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			LCD_String_xy(2,0,"ReEnter Password ");
 7c6:	82 e0       	ldi	r24, 0x02	; 2
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	42 e9       	ldi	r20, 0x92	; 146
 7cc:	50 e0       	ldi	r21, 0x00	; 0
 7ce:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 7d2:	80 e1       	ldi	r24, 0x10	; 16
 7d4:	97 e2       	ldi	r25, 0x27	; 39
 7d6:	fe 01       	movw	r30, r28
 7d8:	31 97       	sbiw	r30, 0x01	; 1
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <user1+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 7dc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 7de:	d9 f7       	brne	.-10     	; 0x7d6 <user1+0xb0>
			_delay_ms(1000);
			LCD_Init();
 7e0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"ReEnter Password ");
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	60 e0       	ldi	r22, 0x00	; 0
 7e8:	42 e9       	ldi	r20, 0x92	; 146
 7ea:	50 e0       	ldi	r21, 0x00	; 0
 7ec:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			i=0;
 7f0:	10 92 0f 02 	sts	0x020F, r1
 7f4:	10 92 0e 02 	sts	0x020E, r1
			user1();	
 7f8:	0e 94 93 03 	call	0x726	; 0x726 <user1>
 7fc:	a3 cf       	rjmp	.-186    	; 0x744 <user1+0x1e>

000007fe <user2>:
		}
	}
}

void user2(){
 7fe:	cf 93       	push	r28
 800:	df 93       	push	r29

	LCD_Init();
 802:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
 806:	02 c0       	rjmp	.+4      	; 0x80c <user2+0xe>
	
	while(i<4){
		password();
 808:	0e 94 57 01 	call	0x2ae	; 0x2ae <password>

void user2(){

	LCD_Init();
	
	while(i<4){
 80c:	80 91 0e 02 	lds	r24, 0x020E
 810:	90 91 0f 02 	lds	r25, 0x020F
 814:	04 97       	sbiw	r24, 0x04	; 4
 816:	c0 f3       	brcs	.-16     	; 0x808 <user2+0xa>
 818:	c8 ec       	ldi	r28, 0xC8	; 200
 81a:	d0 e0       	ldi	r29, 0x00	; 0
		password();
	}
	while(1){
		key();
 81c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		if(pw != " " && epw[0] == user2cpw[0] && epw[1] == user2cpw[1] && epw[2] == user2cpw[2] && epw[3] == user2cpw[3]){
 820:	80 91 1a 02 	lds	r24, 0x021A
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	83 57       	subi	r24, 0x73	; 115
 828:	90 40       	sbci	r25, 0x00	; 0
 82a:	89 f1       	breq	.+98     	; 0x88e <__stack+0x2f>
 82c:	90 91 10 02 	lds	r25, 0x0210
 830:	80 91 09 02 	lds	r24, 0x0209
 834:	98 17       	cp	r25, r24
 836:	59 f5       	brne	.+86     	; 0x88e <__stack+0x2f>
 838:	90 91 11 02 	lds	r25, 0x0211
 83c:	80 91 0a 02 	lds	r24, 0x020A
 840:	98 17       	cp	r25, r24
 842:	29 f5       	brne	.+74     	; 0x88e <__stack+0x2f>
 844:	90 91 12 02 	lds	r25, 0x0212
 848:	80 91 0b 02 	lds	r24, 0x020B
 84c:	98 17       	cp	r25, r24
 84e:	f9 f4       	brne	.+62     	; 0x88e <__stack+0x2f>
 850:	90 91 13 02 	lds	r25, 0x0213
 854:	80 91 0c 02 	lds	r24, 0x020C
 858:	98 17       	cp	r25, r24
 85a:	c9 f4       	brne	.+50     	; 0x88e <__stack+0x2f>
			LCD_Init();
 85c:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Door Opened ");
 860:	81 e0       	ldi	r24, 0x01	; 1
 862:	60 e0       	ldi	r22, 0x00	; 0
 864:	45 e7       	ldi	r20, 0x75	; 117
 866:	50 e0       	ldi	r21, 0x00	; 0
 868:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			DDRB=0xff;
 86c:	8f ef       	ldi	r24, 0xFF	; 255
 86e:	87 bb       	out	0x17, r24	; 23
			PORTB=0x01;
 870:	81 e0       	ldi	r24, 0x01	; 1
 872:	88 bb       	out	0x18, r24	; 24
 874:	80 e5       	ldi	r24, 0x50	; 80
 876:	93 ec       	ldi	r25, 0xC3	; 195
 878:	28 ec       	ldi	r18, 0xC8	; 200
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	f9 01       	movw	r30, r18
 87e:	31 97       	sbiw	r30, 0x01	; 1
 880:	f1 f7       	brne	.-4      	; 0x87e <__stack+0x1f>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 882:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 884:	d9 f7       	brne	.-10     	; 0x87c <__stack+0x1d>
			_delay_ms(5000);
			PORTB=0x00;
 886:	18 ba       	out	0x18, r1	; 24
			LCD_String_xy(1,0,"ReEnter Password ");
			i=0;
			user2();	
		}
	}
}
 888:	df 91       	pop	r29
 88a:	cf 91       	pop	r28
 88c:	08 95       	ret
			PORTB=0x01;
			_delay_ms(5000);
			PORTB=0x00;
			break;
		}else {
			LCD_Init();
 88e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Wrong Password ");
 892:	81 e0       	ldi	r24, 0x01	; 1
 894:	60 e0       	ldi	r22, 0x00	; 0
 896:	42 e8       	ldi	r20, 0x82	; 130
 898:	50 e0       	ldi	r21, 0x00	; 0
 89a:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			LCD_String_xy(2,0,"ReEnter Password ");
 89e:	82 e0       	ldi	r24, 0x02	; 2
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	42 e9       	ldi	r20, 0x92	; 146
 8a4:	50 e0       	ldi	r21, 0x00	; 0
 8a6:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 8aa:	80 e1       	ldi	r24, 0x10	; 16
 8ac:	97 e2       	ldi	r25, 0x27	; 39
 8ae:	fe 01       	movw	r30, r28
 8b0:	31 97       	sbiw	r30, 0x01	; 1
 8b2:	f1 f7       	brne	.-4      	; 0x8b0 <__stack+0x51>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 8b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 8b6:	d9 f7       	brne	.-10     	; 0x8ae <__stack+0x4f>
			_delay_ms(1000);
			LCD_Init();
 8b8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"ReEnter Password ");
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	60 e0       	ldi	r22, 0x00	; 0
 8c0:	42 e9       	ldi	r20, 0x92	; 146
 8c2:	50 e0       	ldi	r21, 0x00	; 0
 8c4:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			i=0;
 8c8:	10 92 0f 02 	sts	0x020F, r1
 8cc:	10 92 0e 02 	sts	0x020E, r1
			user2();	
 8d0:	0e 94 ff 03 	call	0x7fe	; 0x7fe <user2>
 8d4:	a3 cf       	rjmp	.-186    	; 0x81c <user2+0x1e>

000008d6 <admin_check_password>:
			break;
		} 
	}
}

void admin_check_password(){
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29

	LCD_Init();
 8da:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
 8de:	02 c0       	rjmp	.+4      	; 0x8e4 <admin_check_password+0xe>
	
	while(i<4){
		password();
 8e0:	0e 94 57 01 	call	0x2ae	; 0x2ae <password>

void admin_check_password(){

	LCD_Init();
	
	while(i<4){
 8e4:	80 91 0e 02 	lds	r24, 0x020E
 8e8:	90 91 0f 02 	lds	r25, 0x020F
 8ec:	04 97       	sbiw	r24, 0x04	; 4
 8ee:	c0 f3       	brcs	.-16     	; 0x8e0 <admin_check_password+0xa>
 8f0:	c8 ec       	ldi	r28, 0xC8	; 200
 8f2:	d0 e0       	ldi	r29, 0x00	; 0
		password();
	}
	while(1){
		key();
 8f4:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		if(pw != " " && epw[0] == admincpw[0] && epw[1] == admincpw[1] && epw[2] == admincpw[2] && epw[3] == admincpw[3] ){
 8f8:	80 91 1a 02 	lds	r24, 0x021A
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	83 57       	subi	r24, 0x73	; 115
 900:	90 40       	sbci	r25, 0x00	; 0
 902:	89 f1       	breq	.+98     	; 0x966 <admin_check_password+0x90>
 904:	90 91 10 02 	lds	r25, 0x0210
 908:	80 91 01 02 	lds	r24, 0x0201
 90c:	98 17       	cp	r25, r24
 90e:	59 f5       	brne	.+86     	; 0x966 <admin_check_password+0x90>
 910:	90 91 11 02 	lds	r25, 0x0211
 914:	80 91 02 02 	lds	r24, 0x0202
 918:	98 17       	cp	r25, r24
 91a:	29 f5       	brne	.+74     	; 0x966 <admin_check_password+0x90>
 91c:	90 91 12 02 	lds	r25, 0x0212
 920:	80 91 03 02 	lds	r24, 0x0203
 924:	98 17       	cp	r25, r24
 926:	f9 f4       	brne	.+62     	; 0x966 <admin_check_password+0x90>
 928:	90 91 13 02 	lds	r25, 0x0213
 92c:	80 91 04 02 	lds	r24, 0x0204
 930:	98 17       	cp	r25, r24
 932:	c9 f4       	brne	.+50     	; 0x966 <admin_check_password+0x90>
			LCD_Init();
 934:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Door Opened ");
 938:	81 e0       	ldi	r24, 0x01	; 1
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	45 e7       	ldi	r20, 0x75	; 117
 93e:	50 e0       	ldi	r21, 0x00	; 0
 940:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			DDRB=0xff;
 944:	8f ef       	ldi	r24, 0xFF	; 255
 946:	87 bb       	out	0x17, r24	; 23
			PORTB=0x01;
 948:	81 e0       	ldi	r24, 0x01	; 1
 94a:	88 bb       	out	0x18, r24	; 24
 94c:	80 e5       	ldi	r24, 0x50	; 80
 94e:	93 ec       	ldi	r25, 0xC3	; 195
 950:	28 ec       	ldi	r18, 0xC8	; 200
 952:	30 e0       	ldi	r19, 0x00	; 0
 954:	f9 01       	movw	r30, r18
 956:	31 97       	sbiw	r30, 0x01	; 1
 958:	f1 f7       	brne	.-4      	; 0x956 <admin_check_password+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 95a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 95c:	d9 f7       	brne	.-10     	; 0x954 <admin_check_password+0x7e>
			_delay_ms(5000);
			PORTB=0x00;
 95e:	18 ba       	out	0x18, r1	; 24
			LCD_String_xy(1,0,"ReEnter Password ");
			i=0;
			admin_check_password();	
		}
	}
}
 960:	df 91       	pop	r29
 962:	cf 91       	pop	r28
 964:	08 95       	ret
			PORTB=0x01;
			_delay_ms(5000);
			PORTB=0x00;
			break;
		}else {
			LCD_Init();
 966:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Wrong Password ");
 96a:	81 e0       	ldi	r24, 0x01	; 1
 96c:	60 e0       	ldi	r22, 0x00	; 0
 96e:	42 e8       	ldi	r20, 0x82	; 130
 970:	50 e0       	ldi	r21, 0x00	; 0
 972:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			LCD_String_xy(2,0,"ReEnter Password ");
 976:	82 e0       	ldi	r24, 0x02	; 2
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	42 e9       	ldi	r20, 0x92	; 146
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 982:	80 e1       	ldi	r24, 0x10	; 16
 984:	97 e2       	ldi	r25, 0x27	; 39
 986:	fe 01       	movw	r30, r28
 988:	31 97       	sbiw	r30, 0x01	; 1
 98a:	f1 f7       	brne	.-4      	; 0x988 <admin_check_password+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 98c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 98e:	d9 f7       	brne	.-10     	; 0x986 <admin_check_password+0xb0>
			_delay_ms(1000);
			LCD_Init();
 990:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"ReEnter Password ");
 994:	81 e0       	ldi	r24, 0x01	; 1
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	42 e9       	ldi	r20, 0x92	; 146
 99a:	50 e0       	ldi	r21, 0x00	; 0
 99c:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
			i=0;
 9a0:	10 92 0f 02 	sts	0x020F, r1
 9a4:	10 92 0e 02 	sts	0x020E, r1
			admin_check_password();	
 9a8:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <admin_check_password>
 9ac:	a3 cf       	rjmp	.-186    	; 0x8f4 <admin_check_password+0x1e>

000009ae <admin_reset_password_check>:
	}
}

void admin_reset_password_check(){

	reset_password_check1();
 9ae:	0e 94 9c 02 	call	0x538	; 0x538 <reset_password_check1>
	
	if(pw != " " && epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] ){
 9b2:	80 91 1a 02 	lds	r24, 0x021A
 9b6:	90 e0       	ldi	r25, 0x00	; 0
 9b8:	83 57       	subi	r24, 0x73	; 115
 9ba:	90 40       	sbci	r25, 0x00	; 0
 9bc:	09 f4       	brne	.+2      	; 0x9c0 <admin_reset_password_check+0x12>
 9be:	3d c0       	rjmp	.+122    	; 0xa3a <admin_reset_password_check+0x8c>
 9c0:	40 91 10 02 	lds	r20, 0x0210
 9c4:	80 91 15 02 	lds	r24, 0x0215
 9c8:	48 17       	cp	r20, r24
 9ca:	b9 f5       	brne	.+110    	; 0xa3a <admin_reset_password_check+0x8c>
 9cc:	30 91 11 02 	lds	r19, 0x0211
 9d0:	80 91 16 02 	lds	r24, 0x0216
 9d4:	38 17       	cp	r19, r24
 9d6:	89 f5       	brne	.+98     	; 0xa3a <admin_reset_password_check+0x8c>
 9d8:	20 91 12 02 	lds	r18, 0x0212
 9dc:	80 91 17 02 	lds	r24, 0x0217
 9e0:	28 17       	cp	r18, r24
 9e2:	59 f5       	brne	.+86     	; 0xa3a <admin_reset_password_check+0x8c>
 9e4:	90 91 13 02 	lds	r25, 0x0213
 9e8:	80 91 18 02 	lds	r24, 0x0218
 9ec:	98 17       	cp	r25, r24
 9ee:	29 f5       	brne	.+74     	; 0xa3a <admin_reset_password_check+0x8c>
		unsigned j=0;
		for(j=0;j<4;j++){
			admincpw[j] = rpw[j];
 9f0:	40 93 01 02 	sts	0x0201, r20
 9f4:	30 93 02 02 	sts	0x0202, r19
 9f8:	20 93 03 02 	sts	0x0203, r18
 9fc:	90 93 04 02 	sts	0x0204, r25
		}
		LCD_Init();
 a00:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"Password Reset");
 a04:	81 e0       	ldi	r24, 0x01	; 1
 a06:	60 e0       	ldi	r22, 0x00	; 0
 a08:	42 ed       	ldi	r20, 0xD2	; 210
 a0a:	50 e0       	ldi	r21, 0x00	; 0
 a0c:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,0,"Done ");
 a10:	82 e0       	ldi	r24, 0x02	; 2
 a12:	60 e0       	ldi	r22, 0x00	; 0
 a14:	41 ee       	ldi	r20, 0xE1	; 225
 a16:	50 e0       	ldi	r21, 0x00	; 0
 a18:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		DDRB=0xff;
 a1c:	8f ef       	ldi	r24, 0xFF	; 255
 a1e:	87 bb       	out	0x17, r24	; 23
		PORTB=0x01;
 a20:	81 e0       	ldi	r24, 0x01	; 1
 a22:	88 bb       	out	0x18, r24	; 24
 a24:	80 e3       	ldi	r24, 0x30	; 48
 a26:	95 e7       	ldi	r25, 0x75	; 117
 a28:	28 ec       	ldi	r18, 0xC8	; 200
 a2a:	30 e0       	ldi	r19, 0x00	; 0
 a2c:	f9 01       	movw	r30, r18
 a2e:	31 97       	sbiw	r30, 0x01	; 1
 a30:	f1 f7       	brne	.-4      	; 0xa2e <admin_reset_password_check+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a32:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a34:	d9 f7       	brne	.-10     	; 0xa2c <admin_reset_password_check+0x7e>
		_delay_ms(3000);
		PORTB=0x00;	
 a36:	18 ba       	out	0x18, r1	; 24
 a38:	08 95       	ret
	}
	else {
		LCD_Init();
 a3a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"Wrong New");
 a3e:	81 e0       	ldi	r24, 0x01	; 1
 a40:	60 e0       	ldi	r22, 0x00	; 0
 a42:	47 ee       	ldi	r20, 0xE7	; 231
 a44:	50 e0       	ldi	r21, 0x00	; 0
 a46:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,0,"ReEnter Password ");
 a4a:	82 e0       	ldi	r24, 0x02	; 2
 a4c:	60 e0       	ldi	r22, 0x00	; 0
 a4e:	42 e9       	ldi	r20, 0x92	; 146
 a50:	50 e0       	ldi	r21, 0x00	; 0
 a52:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 a56:	80 e3       	ldi	r24, 0x30	; 48
 a58:	95 e7       	ldi	r25, 0x75	; 117
 a5a:	28 ec       	ldi	r18, 0xC8	; 200
 a5c:	30 e0       	ldi	r19, 0x00	; 0
 a5e:	f9 01       	movw	r30, r18
 a60:	31 97       	sbiw	r30, 0x01	; 1
 a62:	f1 f7       	brne	.-4      	; 0xa60 <admin_reset_password_check+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 a64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 a66:	d9 f7       	brne	.-10     	; 0xa5e <admin_reset_password_check+0xb0>
		_delay_ms(3000);
		LCD_Init();
 a68:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"ReEnter Password ");
 a6c:	81 e0       	ldi	r24, 0x01	; 1
 a6e:	60 e0       	ldi	r22, 0x00	; 0
 a70:	42 e9       	ldi	r20, 0x92	; 146
 a72:	50 e0       	ldi	r21, 0x00	; 0
 a74:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		i=0;
 a78:	10 92 0f 02 	sts	0x020F, r1
 a7c:	10 92 0e 02 	sts	0x020E, r1
		reset_password_check();
 a80:	0e 94 1e 03 	call	0x63c	; 0x63c <reset_password_check>
 a84:	08 95       	ret

00000a86 <user1_reset_password_check>:
	}
}

void user1_reset_password_check(){

	reset_password_check1();
 a86:	0e 94 9c 02 	call	0x538	; 0x538 <reset_password_check1>
	
	if(pw != " " && epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] ){
 a8a:	80 91 1a 02 	lds	r24, 0x021A
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	83 57       	subi	r24, 0x73	; 115
 a92:	90 40       	sbci	r25, 0x00	; 0
 a94:	09 f4       	brne	.+2      	; 0xa98 <user1_reset_password_check+0x12>
 a96:	3d c0       	rjmp	.+122    	; 0xb12 <user1_reset_password_check+0x8c>
 a98:	40 91 10 02 	lds	r20, 0x0210
 a9c:	80 91 15 02 	lds	r24, 0x0215
 aa0:	48 17       	cp	r20, r24
 aa2:	b9 f5       	brne	.+110    	; 0xb12 <user1_reset_password_check+0x8c>
 aa4:	30 91 11 02 	lds	r19, 0x0211
 aa8:	80 91 16 02 	lds	r24, 0x0216
 aac:	38 17       	cp	r19, r24
 aae:	89 f5       	brne	.+98     	; 0xb12 <user1_reset_password_check+0x8c>
 ab0:	20 91 12 02 	lds	r18, 0x0212
 ab4:	80 91 17 02 	lds	r24, 0x0217
 ab8:	28 17       	cp	r18, r24
 aba:	59 f5       	brne	.+86     	; 0xb12 <user1_reset_password_check+0x8c>
 abc:	90 91 13 02 	lds	r25, 0x0213
 ac0:	80 91 18 02 	lds	r24, 0x0218
 ac4:	98 17       	cp	r25, r24
 ac6:	29 f5       	brne	.+74     	; 0xb12 <user1_reset_password_check+0x8c>
		unsigned j=0;
		for(j=0;j<4;j++){
			user1cpw[j] = rpw[j];
 ac8:	40 93 05 02 	sts	0x0205, r20
 acc:	30 93 06 02 	sts	0x0206, r19
 ad0:	20 93 07 02 	sts	0x0207, r18
 ad4:	90 93 08 02 	sts	0x0208, r25
		}
		LCD_Init();
 ad8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"Password Reset");
 adc:	81 e0       	ldi	r24, 0x01	; 1
 ade:	60 e0       	ldi	r22, 0x00	; 0
 ae0:	42 ed       	ldi	r20, 0xD2	; 210
 ae2:	50 e0       	ldi	r21, 0x00	; 0
 ae4:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,0,"Done ");
 ae8:	82 e0       	ldi	r24, 0x02	; 2
 aea:	60 e0       	ldi	r22, 0x00	; 0
 aec:	41 ee       	ldi	r20, 0xE1	; 225
 aee:	50 e0       	ldi	r21, 0x00	; 0
 af0:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		DDRB=0xff;
 af4:	8f ef       	ldi	r24, 0xFF	; 255
 af6:	87 bb       	out	0x17, r24	; 23
		PORTB=0x01;
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	88 bb       	out	0x18, r24	; 24
 afc:	80 e3       	ldi	r24, 0x30	; 48
 afe:	95 e7       	ldi	r25, 0x75	; 117
 b00:	28 ec       	ldi	r18, 0xC8	; 200
 b02:	30 e0       	ldi	r19, 0x00	; 0
 b04:	f9 01       	movw	r30, r18
 b06:	31 97       	sbiw	r30, 0x01	; 1
 b08:	f1 f7       	brne	.-4      	; 0xb06 <user1_reset_password_check+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b0a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b0c:	d9 f7       	brne	.-10     	; 0xb04 <user1_reset_password_check+0x7e>
		_delay_ms(3000);
		PORTB=0x00;	
 b0e:	18 ba       	out	0x18, r1	; 24
 b10:	08 95       	ret
	}
	else {
		LCD_Init();
 b12:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"Wrong New");
 b16:	81 e0       	ldi	r24, 0x01	; 1
 b18:	60 e0       	ldi	r22, 0x00	; 0
 b1a:	47 ee       	ldi	r20, 0xE7	; 231
 b1c:	50 e0       	ldi	r21, 0x00	; 0
 b1e:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,0,"ReEnter Password ");
 b22:	82 e0       	ldi	r24, 0x02	; 2
 b24:	60 e0       	ldi	r22, 0x00	; 0
 b26:	42 e9       	ldi	r20, 0x92	; 146
 b28:	50 e0       	ldi	r21, 0x00	; 0
 b2a:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 b2e:	80 e3       	ldi	r24, 0x30	; 48
 b30:	95 e7       	ldi	r25, 0x75	; 117
 b32:	28 ec       	ldi	r18, 0xC8	; 200
 b34:	30 e0       	ldi	r19, 0x00	; 0
 b36:	f9 01       	movw	r30, r18
 b38:	31 97       	sbiw	r30, 0x01	; 1
 b3a:	f1 f7       	brne	.-4      	; 0xb38 <user1_reset_password_check+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 b3c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 b3e:	d9 f7       	brne	.-10     	; 0xb36 <user1_reset_password_check+0xb0>
		_delay_ms(3000);
		LCD_Init();
 b40:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"ReEnter Password ");
 b44:	81 e0       	ldi	r24, 0x01	; 1
 b46:	60 e0       	ldi	r22, 0x00	; 0
 b48:	42 e9       	ldi	r20, 0x92	; 146
 b4a:	50 e0       	ldi	r21, 0x00	; 0
 b4c:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		i=0;
 b50:	10 92 0f 02 	sts	0x020F, r1
 b54:	10 92 0e 02 	sts	0x020E, r1
		reset_password_check();
 b58:	0e 94 1e 03 	call	0x63c	; 0x63c <reset_password_check>
 b5c:	08 95       	ret

00000b5e <user2_reset_password_check>:
}


void user2_reset_password_check(){

	reset_password_check1();
 b5e:	0e 94 9c 02 	call	0x538	; 0x538 <reset_password_check1>
	
	if(pw != " " && epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] ){
 b62:	80 91 1a 02 	lds	r24, 0x021A
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	83 57       	subi	r24, 0x73	; 115
 b6a:	90 40       	sbci	r25, 0x00	; 0
 b6c:	09 f4       	brne	.+2      	; 0xb70 <user2_reset_password_check+0x12>
 b6e:	3d c0       	rjmp	.+122    	; 0xbea <user2_reset_password_check+0x8c>
 b70:	40 91 10 02 	lds	r20, 0x0210
 b74:	80 91 15 02 	lds	r24, 0x0215
 b78:	48 17       	cp	r20, r24
 b7a:	b9 f5       	brne	.+110    	; 0xbea <user2_reset_password_check+0x8c>
 b7c:	30 91 11 02 	lds	r19, 0x0211
 b80:	80 91 16 02 	lds	r24, 0x0216
 b84:	38 17       	cp	r19, r24
 b86:	89 f5       	brne	.+98     	; 0xbea <user2_reset_password_check+0x8c>
 b88:	20 91 12 02 	lds	r18, 0x0212
 b8c:	80 91 17 02 	lds	r24, 0x0217
 b90:	28 17       	cp	r18, r24
 b92:	59 f5       	brne	.+86     	; 0xbea <user2_reset_password_check+0x8c>
 b94:	90 91 13 02 	lds	r25, 0x0213
 b98:	80 91 18 02 	lds	r24, 0x0218
 b9c:	98 17       	cp	r25, r24
 b9e:	29 f5       	brne	.+74     	; 0xbea <user2_reset_password_check+0x8c>
		unsigned j=0;
		for(j=0;j<4;j++){
			user2cpw[j] = rpw[j];
 ba0:	40 93 09 02 	sts	0x0209, r20
 ba4:	30 93 0a 02 	sts	0x020A, r19
 ba8:	20 93 0b 02 	sts	0x020B, r18
 bac:	90 93 0c 02 	sts	0x020C, r25
		}
		LCD_Init();
 bb0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"Password Reset");
 bb4:	81 e0       	ldi	r24, 0x01	; 1
 bb6:	60 e0       	ldi	r22, 0x00	; 0
 bb8:	42 ed       	ldi	r20, 0xD2	; 210
 bba:	50 e0       	ldi	r21, 0x00	; 0
 bbc:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,0,"Done ");
 bc0:	82 e0       	ldi	r24, 0x02	; 2
 bc2:	60 e0       	ldi	r22, 0x00	; 0
 bc4:	41 ee       	ldi	r20, 0xE1	; 225
 bc6:	50 e0       	ldi	r21, 0x00	; 0
 bc8:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		DDRB=0xff;
 bcc:	8f ef       	ldi	r24, 0xFF	; 255
 bce:	87 bb       	out	0x17, r24	; 23
		PORTB=0x01;
 bd0:	81 e0       	ldi	r24, 0x01	; 1
 bd2:	88 bb       	out	0x18, r24	; 24
 bd4:	80 e3       	ldi	r24, 0x30	; 48
 bd6:	95 e7       	ldi	r25, 0x75	; 117
 bd8:	28 ec       	ldi	r18, 0xC8	; 200
 bda:	30 e0       	ldi	r19, 0x00	; 0
 bdc:	f9 01       	movw	r30, r18
 bde:	31 97       	sbiw	r30, 0x01	; 1
 be0:	f1 f7       	brne	.-4      	; 0xbde <user2_reset_password_check+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 be2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 be4:	d9 f7       	brne	.-10     	; 0xbdc <user2_reset_password_check+0x7e>
		_delay_ms(3000);
		PORTB=0x00;	
 be6:	18 ba       	out	0x18, r1	; 24
 be8:	08 95       	ret
	}
	else {
		LCD_Init();
 bea:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"Wrong New");
 bee:	81 e0       	ldi	r24, 0x01	; 1
 bf0:	60 e0       	ldi	r22, 0x00	; 0
 bf2:	47 ee       	ldi	r20, 0xE7	; 231
 bf4:	50 e0       	ldi	r21, 0x00	; 0
 bf6:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,0,"ReEnter Password ");
 bfa:	82 e0       	ldi	r24, 0x02	; 2
 bfc:	60 e0       	ldi	r22, 0x00	; 0
 bfe:	42 e9       	ldi	r20, 0x92	; 146
 c00:	50 e0       	ldi	r21, 0x00	; 0
 c02:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 c06:	80 e3       	ldi	r24, 0x30	; 48
 c08:	95 e7       	ldi	r25, 0x75	; 117
 c0a:	28 ec       	ldi	r18, 0xC8	; 200
 c0c:	30 e0       	ldi	r19, 0x00	; 0
 c0e:	f9 01       	movw	r30, r18
 c10:	31 97       	sbiw	r30, 0x01	; 1
 c12:	f1 f7       	brne	.-4      	; 0xc10 <user2_reset_password_check+0xb2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 c14:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 c16:	d9 f7       	brne	.-10     	; 0xc0e <user2_reset_password_check+0xb0>
		_delay_ms(3000);
		LCD_Init();
 c18:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0,"ReEnter Password ");
 c1c:	81 e0       	ldi	r24, 0x01	; 1
 c1e:	60 e0       	ldi	r22, 0x00	; 0
 c20:	42 e9       	ldi	r20, 0x92	; 146
 c22:	50 e0       	ldi	r21, 0x00	; 0
 c24:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		i=0;
 c28:	10 92 0f 02 	sts	0x020F, r1
 c2c:	10 92 0e 02 	sts	0x020E, r1
		reset_password_check();
 c30:	0e 94 1e 03 	call	0x63c	; 0x63c <reset_password_check>
 c34:	08 95       	ret

00000c36 <admin_reset>:
	}
}


void admin_reset(){
	LCD_Init();
 c36:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Press 1 Reset");
 c3a:	81 e0       	ldi	r24, 0x01	; 1
 c3c:	60 e0       	ldi	r22, 0x00	; 0
 c3e:	41 ef       	ldi	r20, 0xF1	; 241
 c40:	50 e0       	ldi	r21, 0x00	; 0
 c42:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	LCD_String_xy(2,0,"Admin Password");
 c46:	82 e0       	ldi	r24, 0x02	; 2
 c48:	60 e0       	ldi	r22, 0x00	; 0
 c4a:	4f ef       	ldi	r20, 0xFF	; 255
 c4c:	50 e0       	ldi	r21, 0x00	; 0
 c4e:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 c52:	80 e3       	ldi	r24, 0x30	; 48
 c54:	95 e7       	ldi	r25, 0x75	; 117
 c56:	28 ec       	ldi	r18, 0xC8	; 200
 c58:	30 e0       	ldi	r19, 0x00	; 0
 c5a:	f9 01       	movw	r30, r18
 c5c:	31 97       	sbiw	r30, 0x01	; 1
 c5e:	f1 f7       	brne	.-4      	; 0xc5c <admin_reset+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 c60:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 c62:	d9 f7       	brne	.-10     	; 0xc5a <admin_reset+0x24>
	_delay_ms(3000);
	LCD_Init();
 c64:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Press 2 Reset");
 c68:	81 e0       	ldi	r24, 0x01	; 1
 c6a:	60 e0       	ldi	r22, 0x00	; 0
 c6c:	4e e0       	ldi	r20, 0x0E	; 14
 c6e:	51 e0       	ldi	r21, 0x01	; 1
 c70:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	LCD_String_xy(2,0,"User01 Password");
 c74:	82 e0       	ldi	r24, 0x02	; 2
 c76:	60 e0       	ldi	r22, 0x00	; 0
 c78:	4c e1       	ldi	r20, 0x1C	; 28
 c7a:	51 e0       	ldi	r21, 0x01	; 1
 c7c:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 c80:	80 e3       	ldi	r24, 0x30	; 48
 c82:	95 e7       	ldi	r25, 0x75	; 117
 c84:	28 ec       	ldi	r18, 0xC8	; 200
 c86:	30 e0       	ldi	r19, 0x00	; 0
 c88:	f9 01       	movw	r30, r18
 c8a:	31 97       	sbiw	r30, 0x01	; 1
 c8c:	f1 f7       	brne	.-4      	; 0xc8a <admin_reset+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 c8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 c90:	d9 f7       	brne	.-10     	; 0xc88 <admin_reset+0x52>
	_delay_ms(3000);
	LCD_Init();
 c92:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Press 3 Reset");
 c96:	81 e0       	ldi	r24, 0x01	; 1
 c98:	60 e0       	ldi	r22, 0x00	; 0
 c9a:	4c e2       	ldi	r20, 0x2C	; 44
 c9c:	51 e0       	ldi	r21, 0x01	; 1
 c9e:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	LCD_String_xy(2,0,"User02 Password");
 ca2:	82 e0       	ldi	r24, 0x02	; 2
 ca4:	60 e0       	ldi	r22, 0x00	; 0
 ca6:	4a e3       	ldi	r20, 0x3A	; 58
 ca8:	51 e0       	ldi	r21, 0x01	; 1
 caa:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 cae:	80 e3       	ldi	r24, 0x30	; 48
 cb0:	95 e7       	ldi	r25, 0x75	; 117
 cb2:	28 ec       	ldi	r18, 0xC8	; 200
 cb4:	30 e0       	ldi	r19, 0x00	; 0
 cb6:	f9 01       	movw	r30, r18
 cb8:	31 97       	sbiw	r30, 0x01	; 1
 cba:	f1 f7       	brne	.-4      	; 0xcb8 <admin_reset+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 cbc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 cbe:	d9 f7       	brne	.-10     	; 0xcb6 <admin_reset+0x80>
	_delay_ms(3000);
	LCD_Init();
 cc0:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Enter");
 cc4:	81 e0       	ldi	r24, 0x01	; 1
 cc6:	60 e0       	ldi	r22, 0x00	; 0
 cc8:	4a e4       	ldi	r20, 0x4A	; 74
 cca:	51 e0       	ldi	r21, 0x01	; 1
 ccc:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	
	while(1){
		key();
 cd0:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		if(pw != "" &&  pw == '1'){
 cd4:	20 91 1a 02 	lds	r18, 0x021A
 cd8:	82 2f       	mov	r24, r18
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	30 e0       	ldi	r19, 0x00	; 0
 cde:	80 37       	cpi	r24, 0x70	; 112
 ce0:	93 07       	cpc	r25, r19
 ce2:	b1 f0       	breq	.+44     	; 0xd10 <admin_reset+0xda>
 ce4:	21 33       	cpi	r18, 0x31	; 49
 ce6:	a1 f4       	brne	.+40     	; 0xd10 <admin_reset+0xda>
			LCD_Init();
 ce8:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Admin Password");
 cec:	81 e0       	ldi	r24, 0x01	; 1
 cee:	60 e0       	ldi	r22, 0x00	; 0
 cf0:	4f ef       	ldi	r20, 0xFF	; 255
 cf2:	50 e0       	ldi	r21, 0x00	; 0
 cf4:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 cf8:	80 e3       	ldi	r24, 0x30	; 48
 cfa:	95 e7       	ldi	r25, 0x75	; 117
 cfc:	28 ec       	ldi	r18, 0xC8	; 200
 cfe:	30 e0       	ldi	r19, 0x00	; 0
 d00:	f9 01       	movw	r30, r18
 d02:	31 97       	sbiw	r30, 0x01	; 1
 d04:	f1 f7       	brne	.-4      	; 0xd02 <admin_reset+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 d06:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 d08:	d9 f7       	brne	.-10     	; 0xd00 <admin_reset+0xca>
			_delay_ms(3000);
			admin_reset_password_check();
 d0a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <admin_reset_password_check>
 d0e:	08 95       	ret
			break;
		}else if(pw != " " && pw == '2'){
 d10:	83 57       	subi	r24, 0x73	; 115
 d12:	90 40       	sbci	r25, 0x00	; 0
 d14:	e9 f2       	breq	.-70     	; 0xcd0 <admin_reset+0x9a>
 d16:	22 33       	cpi	r18, 0x32	; 50
 d18:	a1 f4       	brne	.+40     	; 0xd42 <admin_reset+0x10c>
			LCD_Init();
 d1a:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"User1 Password");
 d1e:	81 e0       	ldi	r24, 0x01	; 1
 d20:	60 e0       	ldi	r22, 0x00	; 0
 d22:	40 e5       	ldi	r20, 0x50	; 80
 d24:	51 e0       	ldi	r21, 0x01	; 1
 d26:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 d2a:	80 e3       	ldi	r24, 0x30	; 48
 d2c:	95 e7       	ldi	r25, 0x75	; 117
 d2e:	28 ec       	ldi	r18, 0xC8	; 200
 d30:	30 e0       	ldi	r19, 0x00	; 0
 d32:	f9 01       	movw	r30, r18
 d34:	31 97       	sbiw	r30, 0x01	; 1
 d36:	f1 f7       	brne	.-4      	; 0xd34 <admin_reset+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 d38:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 d3a:	d9 f7       	brne	.-10     	; 0xd32 <admin_reset+0xfc>
			_delay_ms(3000);
			user1_reset_password_check();
 d3c:	0e 94 43 05 	call	0xa86	; 0xa86 <user1_reset_password_check>
 d40:	08 95       	ret
			break;
		}else if (pw != " " && pw == '3'){
 d42:	23 33       	cpi	r18, 0x33	; 51
 d44:	09 f0       	breq	.+2      	; 0xd48 <admin_reset+0x112>
 d46:	c4 cf       	rjmp	.-120    	; 0xcd0 <admin_reset+0x9a>
			LCD_Init();
 d48:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"User2 Password");
 d4c:	81 e0       	ldi	r24, 0x01	; 1
 d4e:	60 e0       	ldi	r22, 0x00	; 0
 d50:	4f e5       	ldi	r20, 0x5F	; 95
 d52:	51 e0       	ldi	r21, 0x01	; 1
 d54:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 d58:	80 e3       	ldi	r24, 0x30	; 48
 d5a:	95 e7       	ldi	r25, 0x75	; 117
 d5c:	28 ec       	ldi	r18, 0xC8	; 200
 d5e:	30 e0       	ldi	r19, 0x00	; 0
 d60:	f9 01       	movw	r30, r18
 d62:	31 97       	sbiw	r30, 0x01	; 1
 d64:	f1 f7       	brne	.-4      	; 0xd62 <admin_reset+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 d66:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 d68:	d9 f7       	brne	.-10     	; 0xd60 <admin_reset+0x12a>
			_delay_ms(3000);
			user2_reset_password_check();
 d6a:	0e 94 af 05 	call	0xb5e	; 0xb5e <user2_reset_password_check>
 d6e:	08 95       	ret

00000d70 <admin>:
	}

}

void admin(){
	LCD_Init();
 d70:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Press 1");
 d74:	81 e0       	ldi	r24, 0x01	; 1
 d76:	60 e0       	ldi	r22, 0x00	; 0
 d78:	4e e6       	ldi	r20, 0x6E	; 110
 d7a:	51 e0       	ldi	r21, 0x01	; 1
 d7c:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	LCD_String_xy(2,0,"Open Door");
 d80:	82 e0       	ldi	r24, 0x02	; 2
 d82:	60 e0       	ldi	r22, 0x00	; 0
 d84:	46 e7       	ldi	r20, 0x76	; 118
 d86:	51 e0       	ldi	r21, 0x01	; 1
 d88:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 d8c:	80 e3       	ldi	r24, 0x30	; 48
 d8e:	95 e7       	ldi	r25, 0x75	; 117
 d90:	28 ec       	ldi	r18, 0xC8	; 200
 d92:	30 e0       	ldi	r19, 0x00	; 0
 d94:	f9 01       	movw	r30, r18
 d96:	31 97       	sbiw	r30, 0x01	; 1
 d98:	f1 f7       	brne	.-4      	; 0xd96 <admin+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 d9a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 d9c:	d9 f7       	brne	.-10     	; 0xd94 <admin+0x24>
	_delay_ms(3000);
	LCD_Init();
 d9e:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Press 2");
 da2:	81 e0       	ldi	r24, 0x01	; 1
 da4:	60 e0       	ldi	r22, 0x00	; 0
 da6:	40 e8       	ldi	r20, 0x80	; 128
 da8:	51 e0       	ldi	r21, 0x01	; 1
 daa:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	LCD_String_xy(2,0,"Reset Passwords");
 dae:	82 e0       	ldi	r24, 0x02	; 2
 db0:	60 e0       	ldi	r22, 0x00	; 0
 db2:	48 e8       	ldi	r20, 0x88	; 136
 db4:	51 e0       	ldi	r21, 0x01	; 1
 db6:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 dba:	80 e3       	ldi	r24, 0x30	; 48
 dbc:	95 e7       	ldi	r25, 0x75	; 117
 dbe:	28 ec       	ldi	r18, 0xC8	; 200
 dc0:	30 e0       	ldi	r19, 0x00	; 0
 dc2:	f9 01       	movw	r30, r18
 dc4:	31 97       	sbiw	r30, 0x01	; 1
 dc6:	f1 f7       	brne	.-4      	; 0xdc4 <admin+0x54>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 dc8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 dca:	d9 f7       	brne	.-10     	; 0xdc2 <admin+0x52>
	_delay_ms(3000);
	LCD_Init();
 dcc:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Press 3");
 dd0:	81 e0       	ldi	r24, 0x01	; 1
 dd2:	60 e0       	ldi	r22, 0x00	; 0
 dd4:	48 e9       	ldi	r20, 0x98	; 152
 dd6:	51 e0       	ldi	r21, 0x01	; 1
 dd8:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	LCD_String_xy(2,0,"Lock Door");
 ddc:	82 e0       	ldi	r24, 0x02	; 2
 dde:	60 e0       	ldi	r22, 0x00	; 0
 de0:	40 ea       	ldi	r20, 0xA0	; 160
 de2:	51 e0       	ldi	r21, 0x01	; 1
 de4:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 de8:	80 e3       	ldi	r24, 0x30	; 48
 dea:	95 e7       	ldi	r25, 0x75	; 117
 dec:	28 ec       	ldi	r18, 0xC8	; 200
 dee:	30 e0       	ldi	r19, 0x00	; 0
 df0:	f9 01       	movw	r30, r18
 df2:	31 97       	sbiw	r30, 0x01	; 1
 df4:	f1 f7       	brne	.-4      	; 0xdf2 <admin+0x82>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 df6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 df8:	d9 f7       	brne	.-10     	; 0xdf0 <admin+0x80>
	_delay_ms(3000);
	LCD_Init();
 dfa:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,0,"Enter");
 dfe:	81 e0       	ldi	r24, 0x01	; 1
 e00:	60 e0       	ldi	r22, 0x00	; 0
 e02:	4a e4       	ldi	r20, 0x4A	; 74
 e04:	51 e0       	ldi	r21, 0x01	; 1
 e06:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	
	while(1){
		key();
 e0a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		if(pw != "" &&  pw == '1'){
 e0e:	20 91 1a 02 	lds	r18, 0x021A
 e12:	82 2f       	mov	r24, r18
 e14:	90 e0       	ldi	r25, 0x00	; 0
 e16:	30 e0       	ldi	r19, 0x00	; 0
 e18:	80 37       	cpi	r24, 0x70	; 112
 e1a:	93 07       	cpc	r25, r19
 e1c:	b1 f0       	breq	.+44     	; 0xe4a <admin+0xda>
 e1e:	21 33       	cpi	r18, 0x31	; 49
 e20:	a1 f4       	brne	.+40     	; 0xe4a <admin+0xda>
			LCD_Init();
 e22:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Admin11 ");
 e26:	81 e0       	ldi	r24, 0x01	; 1
 e28:	60 e0       	ldi	r22, 0x00	; 0
 e2a:	4a ea       	ldi	r20, 0xAA	; 170
 e2c:	51 e0       	ldi	r21, 0x01	; 1
 e2e:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 e32:	80 e3       	ldi	r24, 0x30	; 48
 e34:	95 e7       	ldi	r25, 0x75	; 117
 e36:	28 ec       	ldi	r18, 0xC8	; 200
 e38:	30 e0       	ldi	r19, 0x00	; 0
 e3a:	f9 01       	movw	r30, r18
 e3c:	31 97       	sbiw	r30, 0x01	; 1
 e3e:	f1 f7       	brne	.-4      	; 0xe3c <admin+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 e40:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 e42:	d9 f7       	brne	.-10     	; 0xe3a <admin+0xca>
			_delay_ms(3000);
			admin_check_password();
 e44:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <admin_check_password>
 e48:	08 95       	ret
			break;
		}else if(pw != " " && pw == '2'){
 e4a:	83 57       	subi	r24, 0x73	; 115
 e4c:	90 40       	sbci	r25, 0x00	; 0
 e4e:	e9 f2       	breq	.-70     	; 0xe0a <admin+0x9a>
 e50:	22 33       	cpi	r18, 0x32	; 50
 e52:	a1 f4       	brne	.+40     	; 0xe7c <admin+0x10c>
			LCD_Init();
 e54:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Admin22 ");
 e58:	81 e0       	ldi	r24, 0x01	; 1
 e5a:	60 e0       	ldi	r22, 0x00	; 0
 e5c:	43 eb       	ldi	r20, 0xB3	; 179
 e5e:	51 e0       	ldi	r21, 0x01	; 1
 e60:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 e64:	80 e3       	ldi	r24, 0x30	; 48
 e66:	95 e7       	ldi	r25, 0x75	; 117
 e68:	28 ec       	ldi	r18, 0xC8	; 200
 e6a:	30 e0       	ldi	r19, 0x00	; 0
 e6c:	f9 01       	movw	r30, r18
 e6e:	31 97       	sbiw	r30, 0x01	; 1
 e70:	f1 f7       	brne	.-4      	; 0xe6e <admin+0xfe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 e72:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 e74:	d9 f7       	brne	.-10     	; 0xe6c <admin+0xfc>
			_delay_ms(3000);
			admin_reset();
 e76:	0e 94 1b 06 	call	0xc36	; 0xc36 <admin_reset>
 e7a:	08 95       	ret
			break;
		}else if (pw != " " && pw == '3'){
 e7c:	23 33       	cpi	r18, 0x33	; 51
 e7e:	09 f0       	breq	.+2      	; 0xe82 <admin+0x112>
 e80:	c4 cf       	rjmp	.-120    	; 0xe0a <admin+0x9a>
			LCD_Init();
 e82:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
			LCD_String_xy(1,0,"Admin33 ");
 e86:	81 e0       	ldi	r24, 0x01	; 1
 e88:	60 e0       	ldi	r22, 0x00	; 0
 e8a:	4c eb       	ldi	r20, 0xBC	; 188
 e8c:	51 e0       	ldi	r21, 0x01	; 1
 e8e:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 e92:	80 e3       	ldi	r24, 0x30	; 48
 e94:	95 e7       	ldi	r25, 0x75	; 117
 e96:	28 ec       	ldi	r18, 0xC8	; 200
 e98:	30 e0       	ldi	r19, 0x00	; 0
 e9a:	f9 01       	movw	r30, r18
 e9c:	31 97       	sbiw	r30, 0x01	; 1
 e9e:	f1 f7       	brne	.-4      	; 0xe9c <admin+0x12c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 ea0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 ea2:	d9 f7       	brne	.-10     	; 0xe9a <admin+0x12a>
 ea4:	08 95       	ret

00000ea6 <main>:
void user1_reset_password_check();
void user2_reset_password_check();

int main(void){

	LCD_Init();
 ea6:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
	LCD_String_xy(1,4,"Welcome");
 eaa:	81 e0       	ldi	r24, 0x01	; 1
 eac:	64 e0       	ldi	r22, 0x04	; 4
 eae:	45 ec       	ldi	r20, 0xC5	; 197
 eb0:	51 e0       	ldi	r21, 0x01	; 1
 eb2:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
		LCD_String_xy(2,1,"Embedded World");
 eb6:	82 e0       	ldi	r24, 0x02	; 2
 eb8:	61 e0       	ldi	r22, 0x01	; 1
 eba:	4d ec       	ldi	r20, 0xCD	; 205
 ebc:	51 e0       	ldi	r21, 0x01	; 1
 ebe:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
 ec2:	80 e3       	ldi	r24, 0x30	; 48
 ec4:	95 e7       	ldi	r25, 0x75	; 117
 ec6:	28 ec       	ldi	r18, 0xC8	; 200
 ec8:	30 e0       	ldi	r19, 0x00	; 0
 eca:	f9 01       	movw	r30, r18
 ecc:	31 97       	sbiw	r30, 0x01	; 1
 ece:	f1 f7       	brne	.-4      	; 0xecc <main+0x26>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 ed0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 ed2:	d9 f7       	brne	.-10     	; 0xeca <main+0x24>
	_delay_ms(3000);
	
	while(1){
		i=0;
 ed4:	10 92 0f 02 	sts	0x020F, r1
 ed8:	10 92 0e 02 	sts	0x020E, r1
		LCD_Init();
 edc:	0e 94 0f 01 	call	0x21e	; 0x21e <LCD_Init>
		LCD_String_xy(1,0," Show Your Card ");
 ee0:	81 e0       	ldi	r24, 0x01	; 1
 ee2:	60 e0       	ldi	r22, 0x00	; 0
 ee4:	4c ed       	ldi	r20, 0xDC	; 220
 ee6:	51 e0       	ldi	r21, 0x01	; 1
 ee8:	0e 94 31 01 	call	0x262	; 0x262 <LCD_String_xy>
	
		key();
 eec:	0e 94 52 01 	call	0x2a4	; 0x2a4 <key>
		
		if(pw != " " && pw == 'A'){
 ef0:	20 91 1a 02 	lds	r18, 0x021A
 ef4:	82 2f       	mov	r24, r18
 ef6:	90 e0       	ldi	r25, 0x00	; 0
 ef8:	83 57       	subi	r24, 0x73	; 115
 efa:	90 40       	sbci	r25, 0x00	; 0
 efc:	59 f3       	breq	.-42     	; 0xed4 <main+0x2e>
 efe:	21 34       	cpi	r18, 0x41	; 65
 f00:	19 f4       	brne	.+6      	; 0xf08 <main+0x62>
			check_status();
 f02:	0e 94 ae 01 	call	0x35c	; 0x35c <check_status>
 f06:	e6 cf       	rjmp	.-52     	; 0xed4 <main+0x2e>
		}else if(pw != " " && pw == 'B'){
 f08:	22 34       	cpi	r18, 0x42	; 66
 f0a:	19 f4       	brne	.+6      	; 0xf12 <main+0x6c>
			reset_password_check();
 f0c:	0e 94 1e 03 	call	0x63c	; 0x63c <reset_password_check>
 f10:	e1 cf       	rjmp	.-62     	; 0xed4 <main+0x2e>
		}else if(pw != " " && pw == 'D'){
 f12:	24 34       	cpi	r18, 0x44	; 68
 f14:	19 f4       	brne	.+6      	; 0xf1c <main+0x76>
			user1();
 f16:	0e 94 93 03 	call	0x726	; 0x726 <user1>
 f1a:	dc cf       	rjmp	.-72     	; 0xed4 <main+0x2e>
		}else if(pw != " " && pw == 'C'){
 f1c:	23 34       	cpi	r18, 0x43	; 67
 f1e:	19 f4       	brne	.+6      	; 0xf26 <main+0x80>
			admin();
 f20:	0e 94 b8 06 	call	0xd70	; 0xd70 <admin>
 f24:	d7 cf       	rjmp	.-82     	; 0xed4 <main+0x2e>
		}else if(pw != " " && pw == '#'){
 f26:	23 32       	cpi	r18, 0x23	; 35
 f28:	a9 f6       	brne	.-86     	; 0xed4 <main+0x2e>
			user2();
 f2a:	0e 94 ff 03 	call	0x7fe	; 0x7fe <user2>
 f2e:	d2 cf       	rjmp	.-92     	; 0xed4 <main+0x2e>

00000f30 <_exit>:
 f30:	f8 94       	cli

00000f32 <__stop_program>:
 f32:	ff cf       	rjmp	.-2      	; 0xf32 <__stop_program>
