
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001502  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000264  00800060  00001502  00001596  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  008002c4  008002c4  000017fa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000017fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002c6  00000000  00000000  0000181a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001757  00000000  00000000  00001ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e5  00000000  00000000  00003237  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001792  00000000  00000000  0000351c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c0  00000000  00000000  00004cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ab  00000000  00000000  00004e70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c00  00000000  00000000  0000511b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000438  00000000  00000000  00005d1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3c       	cpi	r26, 0xC4	; 196
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ec       	ldi	r26, 0xC4	; 196
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 09 	call	0x13bc	; 0x13bc <main>
      8a:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <keyfind>:

unsigned char colloc, rowloc;


char keyfind()
{
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
	while(1)
	{
		KEY_DDR = 0xF0;
      96:	00 ef       	ldi	r16, 0xF0	; 240
		KEY_PRT = 0xFF;
      98:	1f ef       	ldi	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
      9a:	40 e4       	ldi	r20, 0x40	; 64
      9c:	5c e9       	ldi	r21, 0x9C	; 156
			
			_delay_ms (40);							//20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
		}while(colloc == 0x0F);

		KEY_PRT = 0xEF;
      9e:	28 ec       	ldi	r18, 0xC8	; 200
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	bf ee       	ldi	r27, 0xEF	; 239
		{
			rowloc = 0;
			break;
		}

		KEY_PRT = 0xDF;
      a4:	af ed       	ldi	r26, 0xDF	; 223
		{
			rowloc = 1;
			break;
		}
		
		KEY_PRT = 0xBF;
      a6:	7f eb       	ldi	r23, 0xBF	; 191
		{
			rowloc = 2;
			break;
		}

		KEY_PRT = 0x7F;
      a8:	6f e7       	ldi	r22, 0x7F	; 127

char keyfind()
{
	while(1)
	{
		KEY_DDR = 0xF0;
      aa:	04 bb       	out	0x14, r16	; 20
		KEY_PRT = 0xFF;
      ac:	15 bb       	out	0x15, r17	; 21

		do
		{
			KEY_PRT &= 0x0F;
      ae:	85 b3       	in	r24, 0x15	; 21
      b0:	8f 70       	andi	r24, 0x0F	; 15
      b2:	85 bb       	out	0x15, r24	; 21
			asm("NOP");
      b4:	00 00       	nop
			colloc = (KEY_PIN & 0x0F);
      b6:	83 b3       	in	r24, 0x13	; 19
		}while(colloc != 0x0F);
      b8:	8f 70       	andi	r24, 0x0F	; 15
      ba:	8f 30       	cpi	r24, 0x0F	; 15
      bc:	c1 f7       	brne	.-16     	; 0xae <keyfind+0x1c>
      be:	ca 01       	movw	r24, r20
      c0:	01 97       	sbiw	r24, 0x01	; 1
      c2:	f1 f7       	brne	.-4      	; 0xc0 <keyfind+0x2e>
		do
		{
			do
			{
				_delay_ms(20);						//20ms key debounce time
				colloc = (KEY_PIN & 0x0F);
      c4:	83 b3       	in	r24, 0x13	; 19
			}while(colloc == 0x0F);
      c6:	8f 70       	andi	r24, 0x0F	; 15
      c8:	8f 30       	cpi	r24, 0x0F	; 15
      ca:	c9 f3       	breq	.-14     	; 0xbe <keyfind+0x2c>
      cc:	80 e9       	ldi	r24, 0x90	; 144
      ce:	91 e0       	ldi	r25, 0x01	; 1
      d0:	f9 01       	movw	r30, r18
      d2:	31 97       	sbiw	r30, 0x01	; 1
      d4:	f1 f7       	brne	.-4      	; 0xd2 <keyfind+0x40>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
      d6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
      d8:	d9 f7       	brne	.-10     	; 0xd0 <keyfind+0x3e>
			
			_delay_ms (40);							//20 ms key debounce time
			colloc = (KEY_PIN & 0x0F);
      da:	83 b3       	in	r24, 0x13	; 19
		}while(colloc == 0x0F);
      dc:	8f 70       	andi	r24, 0x0F	; 15
      de:	8f 30       	cpi	r24, 0x0F	; 15
      e0:	71 f3       	breq	.-36     	; 0xbe <keyfind+0x2c>

		KEY_PRT = 0xEF;
      e2:	b5 bb       	out	0x15, r27	; 21
		asm("NOP");
      e4:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
      e6:	83 b3       	in	r24, 0x13	; 19
      e8:	8f 70       	andi	r24, 0x0F	; 15
		if(colloc != 0x0F)
      ea:	8f 30       	cpi	r24, 0x0F	; 15
      ec:	29 f0       	breq	.+10     	; 0xf8 <keyfind+0x66>
      ee:	80 93 ca 02 	sts	0x02CA, r24
		{
			rowloc = 0;
      f2:	10 92 d3 02 	sts	0x02D3, r1
      f6:	20 c0       	rjmp	.+64     	; 0x138 <keyfind+0xa6>
			break;
		}

		KEY_PRT = 0xDF;
      f8:	a5 bb       	out	0x15, r26	; 21
		asm("NOP");
      fa:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
      fc:	83 b3       	in	r24, 0x13	; 19
      fe:	8f 70       	andi	r24, 0x0F	; 15
		if(colloc != 0x0F)
     100:	8f 30       	cpi	r24, 0x0F	; 15
     102:	21 f0       	breq	.+8      	; 0x10c <keyfind+0x7a>
     104:	80 93 ca 02 	sts	0x02CA, r24
		{
			rowloc = 1;
     108:	81 e0       	ldi	r24, 0x01	; 1
     10a:	14 c0       	rjmp	.+40     	; 0x134 <keyfind+0xa2>
			break;
		}
		
		KEY_PRT = 0xBF;
     10c:	75 bb       	out	0x15, r23	; 21
		asm("NOP");
     10e:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
     110:	83 b3       	in	r24, 0x13	; 19
     112:	8f 70       	andi	r24, 0x0F	; 15
		if(colloc != 0x0F)
     114:	8f 30       	cpi	r24, 0x0F	; 15
     116:	21 f0       	breq	.+8      	; 0x120 <keyfind+0x8e>
     118:	80 93 ca 02 	sts	0x02CA, r24
		{
			rowloc = 2;
     11c:	82 e0       	ldi	r24, 0x02	; 2
     11e:	0a c0       	rjmp	.+20     	; 0x134 <keyfind+0xa2>
			break;
		}

		KEY_PRT = 0x7F;
     120:	65 bb       	out	0x15, r22	; 21
		asm("NOP");
     122:	00 00       	nop
		colloc = (KEY_PIN & 0x0F);
     124:	83 b3       	in	r24, 0x13	; 19
     126:	8f 70       	andi	r24, 0x0F	; 15
		if(colloc != 0x0F)
     128:	8f 30       	cpi	r24, 0x0F	; 15
     12a:	09 f4       	brne	.+2      	; 0x12e <keyfind+0x9c>
     12c:	be cf       	rjmp	.-132    	; 0xaa <keyfind+0x18>
     12e:	80 93 ca 02 	sts	0x02CA, r24
		{
			rowloc = 3;
     132:	83 e0       	ldi	r24, 0x03	; 3
     134:	80 93 d3 02 	sts	0x02D3, r24
			break;
		}
	}

	
	if(colloc == 0x0E)
     138:	80 91 ca 02 	lds	r24, 0x02CA
     13c:	8e 30       	cpi	r24, 0x0E	; 14
     13e:	51 f4       	brne	.+20     	; 0x154 <keyfind+0xc2>
	return(keypad[rowloc][0]);
     140:	e0 91 d3 02 	lds	r30, 0x02D3
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	ee 0f       	add	r30, r30
     148:	ff 1f       	adc	r31, r31
     14a:	ee 0f       	add	r30, r30
     14c:	ff 1f       	adc	r31, r31
     14e:	e3 5b       	subi	r30, 0xB3	; 179
     150:	fd 4f       	sbci	r31, 0xFD	; 253
     152:	18 c0       	rjmp	.+48     	; 0x184 <keyfind+0xf2>
	
	else if(colloc == 0x0D)
     154:	8d 30       	cpi	r24, 0x0D	; 13
     156:	59 f4       	brne	.+22     	; 0x16e <keyfind+0xdc>
	return(keypad[rowloc][1]);
     158:	e0 91 d3 02 	lds	r30, 0x02D3
     15c:	f0 e0       	ldi	r31, 0x00	; 0
     15e:	ee 0f       	add	r30, r30
     160:	ff 1f       	adc	r31, r31
     162:	ee 0f       	add	r30, r30
     164:	ff 1f       	adc	r31, r31
     166:	e3 5b       	subi	r30, 0xB3	; 179
     168:	fd 4f       	sbci	r31, 0xFD	; 253
     16a:	81 81       	ldd	r24, Z+1	; 0x01
     16c:	15 c0       	rjmp	.+42     	; 0x198 <keyfind+0x106>
     16e:	e0 91 d3 02 	lds	r30, 0x02D3
	
	else if(colloc == 0x0B)
     172:	8b 30       	cpi	r24, 0x0B	; 11
     174:	49 f4       	brne	.+18     	; 0x188 <keyfind+0xf6>
	return(keypad[rowloc][2]);
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	ee 0f       	add	r30, r30
     17a:	ff 1f       	adc	r31, r31
     17c:	ee 0f       	add	r30, r30
     17e:	ff 1f       	adc	r31, r31
     180:	e1 5b       	subi	r30, 0xB1	; 177
     182:	fd 4f       	sbci	r31, 0xFD	; 253
     184:	80 81       	ld	r24, Z
     186:	08 c0       	rjmp	.+16     	; 0x198 <keyfind+0x106>
	
	else
	return(keypad[rowloc][3]);
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	ee 0f       	add	r30, r30
     18c:	ff 1f       	adc	r31, r31
     18e:	ee 0f       	add	r30, r30
     190:	ff 1f       	adc	r31, r31
     192:	e3 5b       	subi	r30, 0xB3	; 179
     194:	fd 4f       	sbci	r31, 0xFD	; 253
     196:	83 81       	ldd	r24, Z+3	; 0x03
}
     198:	1f 91       	pop	r17
     19a:	0f 91       	pop	r16
     19c:	08 95       	ret

0000019e <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
     19e:	87 b3       	in	r24, 0x17	; 23
     1a0:	8f 70       	andi	r24, 0x0F	; 15
     1a2:	87 bb       	out	0x17, r24	; 23

	//change LCD mode
	SET_RW();		//Read mode
     1a4:	c1 9a       	sbi	0x18, 1	; 24
	CLEAR_RS();		//Read status
     1a6:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     1a8:	81 e0       	ldi	r24, 0x01	; 1
     1aa:	8a 95       	dec	r24
     1ac:	f1 f7       	brne	.-4      	; 0x1aa <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	32 e0       	ldi	r19, 0x02	; 2
     1b2:	c2 9a       	sbi	0x18, 2	; 24
     1b4:	82 2f       	mov	r24, r18
     1b6:	8a 95       	dec	r24
     1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
     1ba:	86 b3       	in	r24, 0x16	; 22
		status=status<<4;
     1bc:	80 7f       	andi	r24, 0xF0	; 240
     1be:	92 2f       	mov	r25, r18
     1c0:	9a 95       	dec	r25
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
     1c4:	c2 98       	cbi	0x18, 2	; 24
     1c6:	93 2f       	mov	r25, r19
     1c8:	9a 95       	dec	r25
     1ca:	f1 f7       	brne	.-4      	; 0x1c8 <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
     1cc:	c2 9a       	sbi	0x18, 2	; 24
     1ce:	92 2f       	mov	r25, r18
     1d0:	9a 95       	dec	r25
     1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
     1d4:	96 b3       	in	r25, 0x16	; 22
     1d6:	92 2f       	mov	r25, r18
     1d8:	9a 95       	dec	r25
     1da:	f1 f7       	brne	.-4      	; 0x1d8 <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
     1dc:	c2 98       	cbi	0x18, 2	; 24
     1de:	93 2f       	mov	r25, r19
     1e0:	9a 95       	dec	r25
     1e2:	f1 f7       	brne	.-4      	; 0x1e0 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
     1e4:	87 fd       	sbrc	r24, 7
     1e6:	e5 cf       	rjmp	.-54     	; 0x1b2 <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
     1e8:	c1 98       	cbi	0x18, 1	; 24
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     1ea:	87 b3       	in	r24, 0x17	; 23
     1ec:	80 6f       	ori	r24, 0xF0	; 240
     1ee:	87 bb       	out	0x17, r24	; 23

}
     1f0:	08 95       	ret

000001f2 <LCDByte>:


};

void LCDByte(uint8_t c,uint8_t isdata)
{
     1f2:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
     1f4:	66 23       	and	r22, r22
     1f6:	11 f4       	brne	.+4      	; 0x1fc <LCDByte+0xa>
	CLEAR_RS();
     1f8:	c0 98       	cbi	0x18, 0	; 24
     1fa:	01 c0       	rjmp	.+2      	; 0x1fe <LCDByte+0xc>
else
	SET_RS();
     1fc:	c0 9a       	sbi	0x18, 0	; 24
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	8a 95       	dec	r24
     202:	f1 f7       	brne	.-4      	; 0x200 <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
     204:	c2 9a       	sbi	0x18, 2	; 24

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
     206:	88 b3       	in	r24, 0x18	; 24
     208:	92 2f       	mov	r25, r18
     20a:	90 7f       	andi	r25, 0xF0	; 240
     20c:	8f 70       	andi	r24, 0x0F	; 15
     20e:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
     210:	98 bb       	out	0x18, r25	; 24
     212:	92 e0       	ldi	r25, 0x02	; 2
     214:	89 2f       	mov	r24, r25
     216:	8a 95       	dec	r24
     218:	f1 f7       	brne	.-4      	; 0x216 <LCDByte+0x24>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
     21a:	c2 98       	cbi	0x18, 2	; 24
     21c:	89 2f       	mov	r24, r25
     21e:	8a 95       	dec	r24
     220:	f1 f7       	brne	.-4      	; 0x21e <LCDByte+0x2c>

_delay_us(1);

//Send the lower nibble
SET_E();
     222:	c2 9a       	sbi	0x18, 2	; 24

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
     224:	88 b3       	in	r24, 0x18	; 24
     226:	22 95       	swap	r18
     228:	20 7f       	andi	r18, 0xF0	; 240
     22a:	8f 70       	andi	r24, 0x0F	; 15
     22c:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
     22e:	88 bb       	out	0x18, r24	; 24
     230:	89 2f       	mov	r24, r25
     232:	8a 95       	dec	r24
     234:	f1 f7       	brne	.-4      	; 0x232 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
     236:	c2 98       	cbi	0x18, 2	; 24
     238:	9a 95       	dec	r25
     23a:	f1 f7       	brne	.-4      	; 0x238 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
     23c:	0e 94 cf 00 	call	0x19e	; 0x19e <LCDBusyLoop>
}
     240:	08 95       	ret

00000242 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	ec 01       	movw	r28, r24
     248:	10 c0       	rjmp	.+32     	; 0x26a <LCDWriteString+0x28>

	*****************************************************************/
 while(*msg!='\0')
 {
 	//Custom Char Support
	if(*msg=='%')
     24a:	85 32       	cpi	r24, 0x25	; 37
     24c:	51 f4       	brne	.+20     	; 0x262 <LCDWriteString+0x20>
	{
		msg++;
     24e:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
     250:	88 81       	ld	r24, Y
     252:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
     254:	88 30       	cpi	r24, 0x08	; 8
     256:	28 f0       	brcs	.+10     	; 0x262 <LCDWriteString+0x20>
		{
			LCDData(cc);
		}
		else
		{
			LCDData('%');
     258:	85 e2       	ldi	r24, 0x25	; 37
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDData(*msg);
     260:	88 81       	ld	r24, Y
		}
	}
	else
	{
		LCDData(*msg);
     262:	61 e0       	ldi	r22, 0x01	; 1
     264:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	}
	msg++;
     268:	21 96       	adiw	r28, 0x01	; 1
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
     26a:	88 81       	ld	r24, Y
     26c:	88 23       	and	r24, r24
     26e:	69 f7       	brne	.-38     	; 0x24a <LCDWriteString+0x8>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
     270:	df 91       	pop	r29
     272:	cf 91       	pop	r28
     274:	08 95       	ret

00000276 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
     276:	ef 92       	push	r14
     278:	ff 92       	push	r15
     27a:	0f 93       	push	r16
     27c:	1f 93       	push	r17
     27e:	df 93       	push	r29
     280:	cf 93       	push	r28
     282:	00 d0       	rcall	.+0      	; 0x284 <LCDWriteInt+0xe>
     284:	00 d0       	rcall	.+0      	; 0x286 <LCDWriteInt+0x10>
     286:	0f 92       	push	r0
     288:	cd b7       	in	r28, 0x3d	; 61
     28a:	de b7       	in	r29, 0x3e	; 62
     28c:	9c 01       	movw	r18, r24
     28e:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
     290:	fe 01       	movw	r30, r28
     292:	31 96       	adiw	r30, 0x01	; 1
     294:	85 e0       	ldi	r24, 0x05	; 5
     296:	df 01       	movw	r26, r30
     298:	1d 92       	st	X+, r1
     29a:	8a 95       	dec	r24
     29c:	e9 f7       	brne	.-6      	; 0x298 <LCDWriteInt+0x22>
     29e:	fe 01       	movw	r30, r28
     2a0:	35 96       	adiw	r30, 0x05	; 5
     2a2:	0d c0       	rjmp	.+26     	; 0x2be <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
     2a4:	c9 01       	movw	r24, r18
     2a6:	6a e0       	ldi	r22, 0x0A	; 10
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     2ae:	80 83       	st	Z, r24
	val=val/10;
     2b0:	c9 01       	movw	r24, r18
     2b2:	6a e0       	ldi	r22, 0x0A	; 10
     2b4:	70 e0       	ldi	r23, 0x00	; 0
     2b6:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__divmodhi4>
     2ba:	9b 01       	movw	r18, r22
     2bc:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
     2be:	21 15       	cp	r18, r1
     2c0:	31 05       	cpc	r19, r1
     2c2:	81 f7       	brne	.-32     	; 0x2a4 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
     2c4:	bf ef       	ldi	r27, 0xFF	; 255
     2c6:	0f 3f       	cpi	r16, 0xFF	; 255
     2c8:	1b 07       	cpc	r17, r27
     2ca:	79 f4       	brne	.+30     	; 0x2ea <LCDWriteInt+0x74>
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
     2d0:	ae 01       	movw	r20, r28
     2d2:	4f 5f       	subi	r20, 0xFF	; 255
     2d4:	5f 4f       	sbci	r21, 0xFF	; 255
     2d6:	02 c0       	rjmp	.+4      	; 0x2dc <LCDWriteInt+0x66>
     2d8:	2f 5f       	subi	r18, 0xFF	; 255
     2da:	3f 4f       	sbci	r19, 0xFF	; 255
     2dc:	fa 01       	movw	r30, r20
     2de:	e2 0f       	add	r30, r18
     2e0:	f3 1f       	adc	r31, r19
     2e2:	80 81       	ld	r24, Z
     2e4:	88 23       	and	r24, r24
     2e6:	c1 f3       	breq	.-16     	; 0x2d8 <LCDWriteInt+0x62>
     2e8:	04 c0       	rjmp	.+8      	; 0x2f2 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
     2ea:	25 e0       	ldi	r18, 0x05	; 5
     2ec:	30 e0       	ldi	r19, 0x00	; 0
     2ee:	20 1b       	sub	r18, r16
     2f0:	31 0b       	sbc	r19, r17
     2f2:	7e 01       	movw	r14, r28
     2f4:	08 94       	sec
     2f6:	e1 1c       	adc	r14, r1
     2f8:	f1 1c       	adc	r15, r1
     2fa:	e2 0e       	add	r14, r18
     2fc:	f3 1e       	adc	r15, r19
     2fe:	89 01       	movw	r16, r18
     300:	09 c0       	rjmp	.+18     	; 0x314 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
     302:	f7 01       	movw	r30, r14
     304:	81 91       	ld	r24, Z+
     306:	7f 01       	movw	r14, r30
     308:	80 5d       	subi	r24, 0xD0	; 208
     30a:	61 e0       	ldi	r22, 0x01	; 1
     30c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
     310:	0f 5f       	subi	r16, 0xFF	; 255
     312:	1f 4f       	sbci	r17, 0xFF	; 255
     314:	05 30       	cpi	r16, 0x05	; 5
     316:	11 05       	cpc	r17, r1
     318:	a4 f3       	brlt	.-24     	; 0x302 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
     31a:	0f 90       	pop	r0
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	cf 91       	pop	r28
     326:	df 91       	pop	r29
     328:	1f 91       	pop	r17
     32a:	0f 91       	pop	r16
     32c:	ff 90       	pop	r15
     32e:	ef 90       	pop	r14
     330:	08 95       	ret

00000332 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
     332:	84 31       	cpi	r24, 0x14	; 20
     334:	78 f4       	brcc	.+30     	; 0x354 <LCDGotoXY+0x22>

	//16x2 LCD type
	
	switch(y)
     336:	62 30       	cpi	r22, 0x02	; 2
     338:	31 f0       	breq	.+12     	; 0x346 <LCDGotoXY+0x14>
     33a:	63 30       	cpi	r22, 0x03	; 3
     33c:	31 f0       	breq	.+12     	; 0x34a <LCDGotoXY+0x18>
     33e:	61 30       	cpi	r22, 0x01	; 1
     340:	29 f4       	brne	.+10     	; 0x34c <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
     342:	80 64       	ori	r24, 0x40	; 64
     344:	03 c0       	rjmp	.+6      	; 0x34c <LCDGotoXY+0x1a>
			break;
		case 2:
			x+=0x14;
     346:	8c 5e       	subi	r24, 0xEC	; 236
     348:	01 c0       	rjmp	.+2      	; 0x34c <LCDGotoXY+0x1a>
			break;
		case 3:
			x+=0x54;
     34a:	8c 5a       	subi	r24, 0xAC	; 172
			break;
	}

	x|=0b10000000;
  	LCDCmd(x);
     34c:	80 68       	ori	r24, 0x80	; 128
     34e:	60 e0       	ldi	r22, 0x00	; 0
     350:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
     354:	08 95       	ret

00000356 <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     35e:	80 e6       	ldi	r24, 0x60	; 96
     360:	9a ee       	ldi	r25, 0xEA	; 234
     362:	01 97       	sbiw	r24, 0x01	; 1
     364:	f1 f7       	brne	.-4      	; 0x362 <LCDInit+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
     366:	87 b3       	in	r24, 0x17	; 23
     368:	80 6f       	ori	r24, 0xF0	; 240
     36a:	87 bb       	out	0x17, r24	; 23
	LCD_E_DDR|=(1<<LCD_E_POS);
     36c:	ba 9a       	sbi	0x17, 2	; 23
	LCD_RS_DDR|=(1<<LCD_RS_POS);
     36e:	b8 9a       	sbi	0x17, 0	; 23
	LCD_RW_DDR|=(1<<LCD_RW_POS);
     370:	b9 9a       	sbi	0x17, 1	; 23

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
     372:	88 b3       	in	r24, 0x18	; 24
     374:	8f 70       	andi	r24, 0x0F	; 15
     376:	88 bb       	out	0x18, r24	; 24
	CLEAR_E();
     378:	c2 98       	cbi	0x18, 2	; 24
	CLEAR_RW();
     37a:	c1 98       	cbi	0x18, 1	; 24
	CLEAR_RS();
     37c:	c0 98       	cbi	0x18, 0	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	8a 95       	dec	r24
     382:	f1 f7       	brne	.-4      	; 0x380 <LCDInit+0x2a>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
     384:	c2 9a       	sbi	0x18, 2	; 24
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
     386:	c5 9a       	sbi	0x18, 5	; 24
     388:	82 e0       	ldi	r24, 0x02	; 2
     38a:	98 2f       	mov	r25, r24
     38c:	9a 95       	dec	r25
     38e:	f1 f7       	brne	.-4      	; 0x38c <LCDInit+0x36>
	_delay_us(1);
	CLEAR_E();
     390:	c2 98       	cbi	0x18, 2	; 24
     392:	8a 95       	dec	r24
     394:	f1 f7       	brne	.-4      	; 0x392 <LCDInit+0x3c>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
     396:	0e 94 cf 00 	call	0x19e	; 0x19e <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
     39a:	81 2f       	mov	r24, r17
     39c:	8c 60       	ori	r24, 0x0C	; 12
     39e:	60 e0       	ldi	r22, 0x00	; 0
     3a0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
     3a4:	88 e2       	ldi	r24, 0x28	; 40
     3a6:	60 e0       	ldi	r22, 0x00	; 0
     3a8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
     3ac:	80 e4       	ldi	r24, 0x40	; 64
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
     3b4:	cd e5       	ldi	r28, 0x5D	; 93
     3b6:	d2 e0       	ldi	r29, 0x02	; 2

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
     3b8:	89 91       	ld	r24, Y+
     3ba:	61 e0       	ldi	r22, 0x01	; 1
     3bc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	c5 39       	cpi	r28, 0x95	; 149
     3c4:	d8 07       	cpc	r29, r24
     3c6:	c1 f7       	brne	.-16     	; 0x3b8 <LCDInit+0x62>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	60 e0       	ldi	r22, 0x00	; 0
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>

}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	08 95       	ret

000003dc <card_check>:
		}
	}
}

///// Detect the RFID card /////
void card_check(void){
     3dc:	af 92       	push	r10
     3de:	bf 92       	push	r11
     3e0:	cf 92       	push	r12
     3e2:	df 92       	push	r13
     3e4:	ef 92       	push	r14
     3e6:	ff 92       	push	r15
     3e8:	0f 93       	push	r16
     3ea:	1f 93       	push	r17

	card_num=0;
     3ec:	10 92 c5 02 	sts	0x02C5, r1
	}
}

///// Initialized the USART/////
void USART_INIT(void){
	UCSRB |= (1<<RXEN)|(1<<TXEN);								// Enable Transmit pin, Receive pin (TXEN=1, RXEN=1)
     3f0:	8a b1       	in	r24, 0x0a	; 10
     3f2:	88 61       	ori	r24, 0x18	; 24
     3f4:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);				// select character size(8 bit)
     3f6:	80 b5       	in	r24, 0x20	; 32
     3f8:	86 68       	ori	r24, 0x86	; 134
     3fa:	80 bd       	out	0x20, r24	; 32
	UBRRL = 12;													// Set baudrate (For 2MHz 9600bps)
     3fc:	8c e0       	ldi	r24, 0x0C	; 12
     3fe:	89 b9       	out	0x09, r24	; 9
		check = USART_RECEIVE();
		if(check == 2){													//check if head byte is received
			for(unsigned char j=0;j<10;j++){
				data[j] = USART_RECEIVE();
			}
			if(data[6]==c_admin[6] && data[7]==c_admin[7] && data[8]==c_admin[8] && data[9]==c_admin[9]){
     400:	a0 90 ab 02 	lds	r10, 0x02AB
     404:	b0 90 ac 02 	lds	r11, 0x02AC
     408:	c0 90 ad 02 	lds	r12, 0x02AD
     40c:	d0 90 ae 02 	lds	r13, 0x02AE
				card_num=1;
				break;
			}
			if(data[6]==c_user1[6] && data[7]==c_user1[7] && data[8]==c_user1[8] && data[9]==c_user1[9]){
     410:	e0 90 b5 02 	lds	r14, 0x02B5
     414:	f0 90 b6 02 	lds	r15, 0x02B6
     418:	00 91 b7 02 	lds	r16, 0x02B7
     41c:	10 91 b8 02 	lds	r17, 0x02B8
				card_num=2;
				break;
			}
			if(data[6]==c_user2[6] && data[7]==c_user2[7] && data[8]==c_user2[8] && data[9]==c_user2[9]){
     420:	b0 91 bf 02 	lds	r27, 0x02BF
     424:	a0 91 c0 02 	lds	r26, 0x02C0
     428:	70 91 c1 02 	lds	r23, 0x02C1
     42c:	60 91 c2 02 	lds	r22, 0x02C2
				card_num=3;
				break;
			}
			if(data[6]==new_user[6] && data[7]==new_user[7] && data[8]==new_user[8] && data[9]==new_user[9]){
     430:	50 91 e5 02 	lds	r21, 0x02E5
     434:	40 91 e6 02 	lds	r20, 0x02E6
     438:	30 91 e7 02 	lds	r19, 0x02E7
     43c:	20 91 e8 02 	lds	r18, 0x02E8
	UBRRL = 12;													// Set baudrate (For 2MHz 9600bps)
}

///// Receiving data using USART /////
unsigned char USART_RECEIVE(void){					
	while(!(UCSRA&(1<<RXC)));									// Wait until data received
     440:	5f 9b       	sbis	0x0b, 7	; 11
     442:	fe cf       	rjmp	.-4      	; 0x440 <card_check+0x64>
	return(UDR);												// return received msg
     444:	8c b1       	in	r24, 0x0c	; 12
	card_num=0;
	unsigned char check = 0; 											//Used to check if head byte is received
	USART_INIT();
	while(1){
		check = USART_RECEIVE();
		if(check == 2){													//check if head byte is received
     446:	82 30       	cpi	r24, 0x02	; 2
     448:	d9 f7       	brne	.-10     	; 0x440 <card_check+0x64>
     44a:	e5 ed       	ldi	r30, 0xD5	; 213
     44c:	f2 e0       	ldi	r31, 0x02	; 2
	UBRRL = 12;													// Set baudrate (For 2MHz 9600bps)
}

///// Receiving data using USART /////
unsigned char USART_RECEIVE(void){					
	while(!(UCSRA&(1<<RXC)));									// Wait until data received
     44e:	5f 9b       	sbis	0x0b, 7	; 11
     450:	fe cf       	rjmp	.-4      	; 0x44e <card_check+0x72>
	return(UDR);												// return received msg
     452:	8c b1       	in	r24, 0x0c	; 12
	USART_INIT();
	while(1){
		check = USART_RECEIVE();
		if(check == 2){													//check if head byte is received
			for(unsigned char j=0;j<10;j++){
				data[j] = USART_RECEIVE();
     454:	81 93       	st	Z+, r24
	unsigned char check = 0; 											//Used to check if head byte is received
	USART_INIT();
	while(1){
		check = USART_RECEIVE();
		if(check == 2){													//check if head byte is received
			for(unsigned char j=0;j<10;j++){
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	ef 3d       	cpi	r30, 0xDF	; 223
     45a:	f8 07       	cpc	r31, r24
     45c:	c1 f7       	brne	.-16     	; 0x44e <card_check+0x72>
				data[j] = USART_RECEIVE();
			}
			if(data[6]==c_admin[6] && data[7]==c_admin[7] && data[8]==c_admin[8] && data[9]==c_admin[9]){
     45e:	90 91 db 02 	lds	r25, 0x02DB
     462:	9a 15       	cp	r25, r10
     464:	71 f4       	brne	.+28     	; 0x482 <card_check+0xa6>
     466:	80 91 dc 02 	lds	r24, 0x02DC
     46a:	8b 15       	cp	r24, r11
     46c:	51 f4       	brne	.+20     	; 0x482 <card_check+0xa6>
     46e:	80 91 dd 02 	lds	r24, 0x02DD
     472:	8c 15       	cp	r24, r12
     474:	31 f4       	brne	.+12     	; 0x482 <card_check+0xa6>
     476:	80 91 de 02 	lds	r24, 0x02DE
     47a:	8d 15       	cp	r24, r13
     47c:	11 f4       	brne	.+4      	; 0x482 <card_check+0xa6>
				card_num=1;
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	2f c0       	rjmp	.+94     	; 0x4e0 <card_check+0x104>
				break;
			}
			if(data[6]==c_user1[6] && data[7]==c_user1[7] && data[8]==c_user1[8] && data[9]==c_user1[9]){
     482:	9e 15       	cp	r25, r14
     484:	71 f4       	brne	.+28     	; 0x4a2 <card_check+0xc6>
     486:	80 91 dc 02 	lds	r24, 0x02DC
     48a:	8f 15       	cp	r24, r15
     48c:	51 f4       	brne	.+20     	; 0x4a2 <card_check+0xc6>
     48e:	80 91 dd 02 	lds	r24, 0x02DD
     492:	80 17       	cp	r24, r16
     494:	31 f4       	brne	.+12     	; 0x4a2 <card_check+0xc6>
     496:	80 91 de 02 	lds	r24, 0x02DE
     49a:	81 17       	cp	r24, r17
     49c:	11 f4       	brne	.+4      	; 0x4a2 <card_check+0xc6>
				card_num=2;
     49e:	82 e0       	ldi	r24, 0x02	; 2
     4a0:	1f c0       	rjmp	.+62     	; 0x4e0 <card_check+0x104>
				break;
			}
			if(data[6]==c_user2[6] && data[7]==c_user2[7] && data[8]==c_user2[8] && data[9]==c_user2[9]){
     4a2:	9b 17       	cp	r25, r27
     4a4:	71 f4       	brne	.+28     	; 0x4c2 <card_check+0xe6>
     4a6:	80 91 dc 02 	lds	r24, 0x02DC
     4aa:	8a 17       	cp	r24, r26
     4ac:	51 f4       	brne	.+20     	; 0x4c2 <card_check+0xe6>
     4ae:	80 91 dd 02 	lds	r24, 0x02DD
     4b2:	87 17       	cp	r24, r23
     4b4:	31 f4       	brne	.+12     	; 0x4c2 <card_check+0xe6>
     4b6:	80 91 de 02 	lds	r24, 0x02DE
     4ba:	86 17       	cp	r24, r22
     4bc:	11 f4       	brne	.+4      	; 0x4c2 <card_check+0xe6>
				card_num=3;
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	0f c0       	rjmp	.+30     	; 0x4e0 <card_check+0x104>
				break;
			}
			if(data[6]==new_user[6] && data[7]==new_user[7] && data[8]==new_user[8] && data[9]==new_user[9]){
     4c2:	95 17       	cp	r25, r21
     4c4:	81 f4       	brne	.+32     	; 0x4e6 <card_check+0x10a>
     4c6:	80 91 dc 02 	lds	r24, 0x02DC
     4ca:	84 17       	cp	r24, r20
     4cc:	61 f4       	brne	.+24     	; 0x4e6 <card_check+0x10a>
     4ce:	80 91 dd 02 	lds	r24, 0x02DD
     4d2:	83 17       	cp	r24, r19
     4d4:	41 f4       	brne	.+16     	; 0x4e6 <card_check+0x10a>
     4d6:	80 91 de 02 	lds	r24, 0x02DE
     4da:	82 17       	cp	r24, r18
     4dc:	21 f4       	brne	.+8      	; 0x4e6 <card_check+0x10a>
				card_num=4;
     4de:	84 e0       	ldi	r24, 0x04	; 4
     4e0:	80 93 c5 02 	sts	0x02C5, r24
     4e4:	05 c0       	rjmp	.+10     	; 0x4f0 <card_check+0x114>
				break;
			}
			if(data[9]!=0 ){
     4e6:	80 91 de 02 	lds	r24, 0x02DE
     4ea:	88 23       	and	r24, r24
     4ec:	09 f4       	brne	.+2      	; 0x4f0 <card_check+0x114>
     4ee:	a8 cf       	rjmp	.-176    	; 0x440 <card_check+0x64>
				break;
			}
		}
	}
}
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	df 90       	pop	r13
     4fa:	cf 90       	pop	r12
     4fc:	bf 90       	pop	r11
     4fe:	af 90       	pop	r10
     500:	08 95       	ret

00000502 <USART_INIT>:

///// Initialized the USART/////
void USART_INIT(void){
	UCSRB |= (1<<RXEN)|(1<<TXEN);								// Enable Transmit pin, Receive pin (TXEN=1, RXEN=1)
     502:	8a b1       	in	r24, 0x0a	; 10
     504:	88 61       	ori	r24, 0x18	; 24
     506:	8a b9       	out	0x0a, r24	; 10
	UCSRC |= (1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);				// select character size(8 bit)
     508:	80 b5       	in	r24, 0x20	; 32
     50a:	86 68       	ori	r24, 0x86	; 134
     50c:	80 bd       	out	0x20, r24	; 32
	UBRRL = 12;													// Set baudrate (For 2MHz 9600bps)
     50e:	8c e0       	ldi	r24, 0x0C	; 12
     510:	89 b9       	out	0x09, r24	; 9
}
     512:	08 95       	ret

00000514 <USART_RECEIVE>:

///// Receiving data using USART /////
unsigned char USART_RECEIVE(void){					
	while(!(UCSRA&(1<<RXC)));									// Wait until data received
     514:	5f 9b       	sbis	0x0b, 7	; 11
     516:	fe cf       	rjmp	.-4      	; 0x514 <USART_RECEIVE>
	return(UDR);												// return received msg
     518:	8c b1       	in	r24, 0x0c	; 12
}
     51a:	08 95       	ret

0000051c <key>:

///// Identify the pressed key /////
void key(void){
	pw = keyfind();
     51c:	0e 94 49 00 	call	0x92	; 0x92 <keyfind>
     520:	80 93 d4 02 	sts	0x02D4, r24
}
     524:	08 95       	ret

00000526 <password>:

///// Set password to array /////
void password(void){
	LCDClear();
     526:	81 e0       	ldi	r24, 0x01	; 1
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Enter Password ");
     52e:	80 e0       	ldi	r24, 0x00	; 0
     530:	60 e0       	ldi	r22, 0x00	; 0
     532:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     536:	80 e6       	ldi	r24, 0x60	; 96
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	
	while(1){
		key();
     53e:	0e 94 8e 02 	call	0x51c	; 0x51c <key>
		if(i < 4 && pw != 'A' && pw != 'B' && pw != 'D' && pw != '*' && pw != '#' && pw != 'C'){
     542:	80 91 c4 02 	lds	r24, 0x02C4
     546:	84 30       	cpi	r24, 0x04	; 4
     548:	10 f5       	brcc	.+68     	; 0x58e <password+0x68>
     54a:	90 91 d4 02 	lds	r25, 0x02D4
     54e:	91 34       	cpi	r25, 0x41	; 65
     550:	f1 f0       	breq	.+60     	; 0x58e <password+0x68>
     552:	92 34       	cpi	r25, 0x42	; 66
     554:	e1 f0       	breq	.+56     	; 0x58e <password+0x68>
     556:	94 34       	cpi	r25, 0x44	; 68
     558:	d1 f0       	breq	.+52     	; 0x58e <password+0x68>
     55a:	9a 32       	cpi	r25, 0x2A	; 42
     55c:	c1 f0       	breq	.+48     	; 0x58e <password+0x68>
     55e:	93 32       	cpi	r25, 0x23	; 35
     560:	b1 f0       	breq	.+44     	; 0x58e <password+0x68>
     562:	93 34       	cpi	r25, 0x43	; 67
     564:	a1 f0       	breq	.+40     	; 0x58e <password+0x68>
			LCDWriteStringXY(i,1,"*");
     566:	61 e0       	ldi	r22, 0x01	; 1
     568:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     56c:	80 e7       	ldi	r24, 0x70	; 112
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			epw[i] = pw;
     574:	80 91 c4 02 	lds	r24, 0x02C4
     578:	e8 2f       	mov	r30, r24
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	ea 53       	subi	r30, 0x3A	; 58
     57e:	fd 4f       	sbci	r31, 0xFD	; 253
     580:	90 91 d4 02 	lds	r25, 0x02D4
     584:	90 83       	st	Z, r25
			i++;
     586:	8f 5f       	subi	r24, 0xFF	; 255
     588:	80 93 c4 02 	sts	0x02C4, r24
     58c:	d8 cf       	rjmp	.-80     	; 0x53e <password+0x18>
		}else if(pw == 'C'){
     58e:	90 91 d4 02 	lds	r25, 0x02D4
     592:	93 34       	cpi	r25, 0x43	; 67
     594:	89 f4       	brne	.+34     	; 0x5b8 <password+0x92>
			i--;
     596:	81 50       	subi	r24, 0x01	; 1
     598:	80 93 c4 02 	sts	0x02C4, r24
			LCDWriteStringXY(i,1," ");;
     59c:	61 e0       	ldi	r22, 0x01	; 1
     59e:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     5a2:	82 e7       	ldi	r24, 0x72	; 114
     5a4:	90 e0       	ldi	r25, 0x00	; 0
     5a6:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			if(i>10){i=0;}
     5aa:	80 91 c4 02 	lds	r24, 0x02C4
     5ae:	8b 30       	cpi	r24, 0x0B	; 11
     5b0:	30 f2       	brcs	.-116    	; 0x53e <password+0x18>
     5b2:	10 92 c4 02 	sts	0x02C4, r1
     5b6:	c3 cf       	rjmp	.-122    	; 0x53e <password+0x18>
		}else if(pw == 'A' && i==4){
     5b8:	91 34       	cpi	r25, 0x41	; 65
     5ba:	09 f6       	brne	.-126    	; 0x53e <password+0x18>
     5bc:	84 30       	cpi	r24, 0x04	; 4
     5be:	09 f0       	breq	.+2      	; 0x5c2 <password+0x9c>
     5c0:	be cf       	rjmp	.-132    	; 0x53e <password+0x18>
		break;
		}
	}
}
     5c2:	08 95       	ret

000005c4 <reset_password_check2>:
} 

///// Check re enter reset password 2 /////
void reset_password_check2(void){

	LCDClear();
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Re-Enter New");
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	60 e0       	ldi	r22, 0x00	; 0
     5d0:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     5d4:	84 e7       	ldi	r24, 0x74	; 116
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(0,1,"Password ");
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	61 e0       	ldi	r22, 0x01	; 1
     5e0:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     5e4:	81 e8       	ldi	r24, 0x81	; 129
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     5ec:	80 e1       	ldi	r24, 0x10	; 16
     5ee:	97 e2       	ldi	r25, 0x27	; 39
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5f0:	28 ec       	ldi	r18, 0xC8	; 200
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	f9 01       	movw	r30, r18
     5f6:	31 97       	sbiw	r30, 0x01	; 1
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <reset_password_check2+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5fc:	d9 f7       	brne	.-10     	; 0x5f4 <reset_password_check2+0x30>
	_delay_ms(1000);
	LCDClear();
     5fe:	81 e0       	ldi	r24, 0x01	; 1
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"New Password");
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	60 e0       	ldi	r22, 0x00	; 0
     60a:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     60e:	8b e8       	ldi	r24, 0x8B	; 139
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>

	while(1){

		key();
     616:	0e 94 8e 02 	call	0x51c	; 0x51c <key>
		
		if(i < 4 && pw != 'A' && pw != 'B' && pw != 'D' && pw != '*' && pw != '#' && pw != 'C'){
     61a:	80 91 c4 02 	lds	r24, 0x02C4
     61e:	84 30       	cpi	r24, 0x04	; 4
     620:	10 f5       	brcc	.+68     	; 0x666 <reset_password_check2+0xa2>
     622:	90 91 d4 02 	lds	r25, 0x02D4
     626:	91 34       	cpi	r25, 0x41	; 65
     628:	f1 f0       	breq	.+60     	; 0x666 <reset_password_check2+0xa2>
     62a:	92 34       	cpi	r25, 0x42	; 66
     62c:	e1 f0       	breq	.+56     	; 0x666 <reset_password_check2+0xa2>
     62e:	94 34       	cpi	r25, 0x44	; 68
     630:	d1 f0       	breq	.+52     	; 0x666 <reset_password_check2+0xa2>
     632:	9a 32       	cpi	r25, 0x2A	; 42
     634:	c1 f0       	breq	.+48     	; 0x666 <reset_password_check2+0xa2>
     636:	93 32       	cpi	r25, 0x23	; 35
     638:	b1 f0       	breq	.+44     	; 0x666 <reset_password_check2+0xa2>
     63a:	93 34       	cpi	r25, 0x43	; 67
     63c:	a1 f0       	breq	.+40     	; 0x666 <reset_password_check2+0xa2>
			LCDWriteStringXY(i,1,"*");
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     644:	80 e7       	ldi	r24, 0x70	; 112
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			epw[i] = pw;
     64c:	80 91 c4 02 	lds	r24, 0x02C4
     650:	e8 2f       	mov	r30, r24
     652:	f0 e0       	ldi	r31, 0x00	; 0
     654:	ea 53       	subi	r30, 0x3A	; 58
     656:	fd 4f       	sbci	r31, 0xFD	; 253
     658:	90 91 d4 02 	lds	r25, 0x02D4
     65c:	90 83       	st	Z, r25
			i++;
     65e:	8f 5f       	subi	r24, 0xFF	; 255
     660:	80 93 c4 02 	sts	0x02C4, r24
     664:	d8 cf       	rjmp	.-80     	; 0x616 <reset_password_check2+0x52>
		}else if(pw == 'C'){
     666:	90 91 d4 02 	lds	r25, 0x02D4
     66a:	93 34       	cpi	r25, 0x43	; 67
     66c:	89 f4       	brne	.+34     	; 0x690 <reset_password_check2+0xcc>
			i--;
     66e:	81 50       	subi	r24, 0x01	; 1
     670:	80 93 c4 02 	sts	0x02C4, r24
			LCDWriteStringXY(i,1," ");
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     67a:	82 e7       	ldi	r24, 0x72	; 114
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			if(i>10){i=0;}
     682:	80 91 c4 02 	lds	r24, 0x02C4
     686:	8b 30       	cpi	r24, 0x0B	; 11
     688:	30 f2       	brcs	.-116    	; 0x616 <reset_password_check2+0x52>
     68a:	10 92 c4 02 	sts	0x02C4, r1
     68e:	c3 cf       	rjmp	.-122    	; 0x616 <reset_password_check2+0x52>
		}else if (pw == 'A' && i==4){
     690:	91 34       	cpi	r25, 0x41	; 65
     692:	09 f6       	brne	.-126    	; 0x616 <reset_password_check2+0x52>
     694:	84 30       	cpi	r24, 0x04	; 4
     696:	09 f0       	breq	.+2      	; 0x69a <reset_password_check2+0xd6>
     698:	be cf       	rjmp	.-132    	; 0x616 <reset_password_check2+0x52>
		break;
		}
	}
}
     69a:	08 95       	ret

0000069c <reset_password_check1>:
}

///// Check reset password 01 /////
void reset_password_check1(void){

	LCDClear();
     69c:	81 e0       	ldi	r24, 0x01	; 1
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Enter New");
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     6ac:	88 e9       	ldi	r24, 0x98	; 152
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(0,1,"Password ");
     6b4:	80 e0       	ldi	r24, 0x00	; 0
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     6bc:	81 e8       	ldi	r24, 0x81	; 129
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     6c4:	80 e1       	ldi	r24, 0x10	; 16
     6c6:	97 e2       	ldi	r25, 0x27	; 39
     6c8:	28 ec       	ldi	r18, 0xC8	; 200
     6ca:	30 e0       	ldi	r19, 0x00	; 0
     6cc:	f9 01       	movw	r30, r18
     6ce:	31 97       	sbiw	r30, 0x01	; 1
     6d0:	f1 f7       	brne	.-4      	; 0x6ce <reset_password_check1+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     6d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     6d4:	d9 f7       	brne	.-10     	; 0x6cc <reset_password_check1+0x30>
	_delay_ms(1000);
	
	LCDClear();
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	60 e0       	ldi	r22, 0x00	; 0
     6da:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"New Password");
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	60 e0       	ldi	r22, 0x00	; 0
     6e2:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     6e6:	8b e8       	ldi	r24, 0x8B	; 139
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	
	i=0;
     6ee:	10 92 c4 02 	sts	0x02C4, r1

	while(1){
		key();
     6f2:	0e 94 8e 02 	call	0x51c	; 0x51c <key>
		
		if(i < 4 && pw != 'A' && pw != 'B' && pw != 'D' && pw != '*' && pw != '#' && pw != 'C'){
     6f6:	80 91 c4 02 	lds	r24, 0x02C4
     6fa:	84 30       	cpi	r24, 0x04	; 4
     6fc:	10 f5       	brcc	.+68     	; 0x742 <reset_password_check1+0xa6>
     6fe:	90 91 d4 02 	lds	r25, 0x02D4
     702:	91 34       	cpi	r25, 0x41	; 65
     704:	f1 f0       	breq	.+60     	; 0x742 <reset_password_check1+0xa6>
     706:	92 34       	cpi	r25, 0x42	; 66
     708:	e1 f0       	breq	.+56     	; 0x742 <reset_password_check1+0xa6>
     70a:	94 34       	cpi	r25, 0x44	; 68
     70c:	d1 f0       	breq	.+52     	; 0x742 <reset_password_check1+0xa6>
     70e:	9a 32       	cpi	r25, 0x2A	; 42
     710:	c1 f0       	breq	.+48     	; 0x742 <reset_password_check1+0xa6>
     712:	93 32       	cpi	r25, 0x23	; 35
     714:	b1 f0       	breq	.+44     	; 0x742 <reset_password_check1+0xa6>
     716:	93 34       	cpi	r25, 0x43	; 67
     718:	a1 f0       	breq	.+40     	; 0x742 <reset_password_check1+0xa6>
			LCDWriteStringXY(i,1,"*");
     71a:	61 e0       	ldi	r22, 0x01	; 1
     71c:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     720:	80 e7       	ldi	r24, 0x70	; 112
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			rpw[i] = pw;
     728:	80 91 c4 02 	lds	r24, 0x02C4
     72c:	e8 2f       	mov	r30, r24
     72e:	f0 e0       	ldi	r31, 0x00	; 0
     730:	e5 53       	subi	r30, 0x35	; 53
     732:	fd 4f       	sbci	r31, 0xFD	; 253
     734:	90 91 d4 02 	lds	r25, 0x02D4
     738:	90 83       	st	Z, r25
			i++;
     73a:	8f 5f       	subi	r24, 0xFF	; 255
     73c:	80 93 c4 02 	sts	0x02C4, r24
     740:	d8 cf       	rjmp	.-80     	; 0x6f2 <reset_password_check1+0x56>
		}else if(pw == 'C'){
     742:	90 91 d4 02 	lds	r25, 0x02D4
     746:	93 34       	cpi	r25, 0x43	; 67
     748:	79 f4       	brne	.+30     	; 0x768 <reset_password_check1+0xcc>
			i--;
     74a:	81 50       	subi	r24, 0x01	; 1
     74c:	80 93 c4 02 	sts	0x02C4, r24
			LCDWriteStringXY(i,1," ");
     750:	61 e0       	ldi	r22, 0x01	; 1
     752:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     756:	82 e7       	ldi	r24, 0x72	; 114
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			if(i>10){i=0;}
     75e:	80 91 c4 02 	lds	r24, 0x02C4
     762:	8b 30       	cpi	r24, 0x0B	; 11
     764:	30 f2       	brcs	.-116    	; 0x6f2 <reset_password_check1+0x56>
     766:	c3 cf       	rjmp	.-122    	; 0x6ee <reset_password_check1+0x52>
		}else if (pw == 'A' && i==4){
     768:	91 34       	cpi	r25, 0x41	; 65
     76a:	19 f6       	brne	.-122    	; 0x6f2 <reset_password_check1+0x56>
     76c:	84 30       	cpi	r24, 0x04	; 4
     76e:	09 f6       	brne	.-126    	; 0x6f2 <reset_password_check1+0x56>
		i=0;
     770:	10 92 c4 02 	sts	0x02C4, r1
		reset_password_check2();
     774:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <reset_password_check2>
		break;
		} 
	}
} 
     778:	08 95       	ret

0000077a <reset_password_check>:
		}
	}
}

///// Set reset password /////
void reset_password_check(void){
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	c8 ec       	ldi	r28, 0xC8	; 200
     780:	d0 e0       	ldi	r29, 0x00	; 0

	reset_password_check1();
     782:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_password_check1>
	
	if(epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] && pw == 'A'){
     786:	40 91 c6 02 	lds	r20, 0x02C6
     78a:	80 91 cb 02 	lds	r24, 0x02CB
     78e:	48 17       	cp	r20, r24
     790:	09 f0       	breq	.+2      	; 0x794 <reset_password_check+0x1a>
     792:	3c c0       	rjmp	.+120    	; 0x80c <reset_password_check+0x92>
     794:	30 91 c7 02 	lds	r19, 0x02C7
     798:	80 91 cc 02 	lds	r24, 0x02CC
     79c:	38 17       	cp	r19, r24
     79e:	b1 f5       	brne	.+108    	; 0x80c <reset_password_check+0x92>
     7a0:	20 91 c8 02 	lds	r18, 0x02C8
     7a4:	80 91 cd 02 	lds	r24, 0x02CD
     7a8:	28 17       	cp	r18, r24
     7aa:	81 f5       	brne	.+96     	; 0x80c <reset_password_check+0x92>
     7ac:	90 91 c9 02 	lds	r25, 0x02C9
     7b0:	80 91 ce 02 	lds	r24, 0x02CE
     7b4:	98 17       	cp	r25, r24
     7b6:	51 f5       	brne	.+84     	; 0x80c <reset_password_check+0x92>
     7b8:	80 91 d4 02 	lds	r24, 0x02D4
     7bc:	81 34       	cpi	r24, 0x41	; 65
     7be:	31 f5       	brne	.+76     	; 0x80c <reset_password_check+0x92>
		unsigned j=0;
		for(j=0;j<4;j++){
			cpw[j] = rpw[j];
     7c0:	40 93 95 02 	sts	0x0295, r20
     7c4:	30 93 96 02 	sts	0x0296, r19
     7c8:	20 93 97 02 	sts	0x0297, r18
     7cc:	90 93 98 02 	sts	0x0298, r25
		}
		LCDClear();
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Password Reset");
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     7e0:	82 ea       	ldi	r24, 0xA2	; 162
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"Done ");
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     7f0:	81 eb       	ldi	r24, 0xB1	; 177
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     7f8:	80 e1       	ldi	r24, 0x10	; 16
     7fa:	97 e2       	ldi	r25, 0x27	; 39
     7fc:	28 ec       	ldi	r18, 0xC8	; 200
     7fe:	30 e0       	ldi	r19, 0x00	; 0
     800:	f9 01       	movw	r30, r18
     802:	31 97       	sbiw	r30, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <reset_password_check+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     806:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     808:	d9 f7       	brne	.-10     	; 0x800 <reset_password_check+0x86>
     80a:	2e c0       	rjmp	.+92     	; 0x868 <__stack+0x9>
		_delay_ms(1000);
	}
	else if(pw == 'A'){
     80c:	80 91 d4 02 	lds	r24, 0x02D4
     810:	81 34       	cpi	r24, 0x41	; 65
     812:	51 f5       	brne	.+84     	; 0x868 <__stack+0x9>
		LCDClear();
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Wrong New");
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     824:	87 eb       	ldi	r24, 0xB7	; 183
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"ReEnter Password ");
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	61 e0       	ldi	r22, 0x01	; 1
     830:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     834:	81 ec       	ldi	r24, 0xC1	; 193
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     83c:	88 e9       	ldi	r24, 0x98	; 152
     83e:	9a e3       	ldi	r25, 0x3A	; 58
     840:	fe 01       	movw	r30, r28
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	f1 f7       	brne	.-4      	; 0x842 <reset_password_check+0xc8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     846:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     848:	d9 f7       	brne	.-10     	; 0x840 <reset_password_check+0xc6>
		_delay_ms(1500);
		LCDClear();
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	60 e0       	ldi	r22, 0x00	; 0
     84e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"ReEnter Password ");
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	60 e0       	ldi	r22, 0x00	; 0
     856:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     85a:	81 ec       	ldi	r24, 0xC1	; 193
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		i=0;
     862:	10 92 c4 02 	sts	0x02C4, r1
     866:	8d cf       	rjmp	.-230    	; 0x782 <reset_password_check+0x8>
		reset_password_check();;
	}

}
     868:	df 91       	pop	r29
     86a:	cf 91       	pop	r28
     86c:	08 95       	ret

0000086e <user1>:
		}
	}
}

//// Check user 1 password /////
void user1(void){
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29

	LCDClear();
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
     87a:	02 c0       	rjmp	.+4      	; 0x880 <user1+0x12>
	
	while(i<4){
		password();
     87c:	0e 94 93 02 	call	0x526	; 0x526 <password>
//// Check user 1 password /////
void user1(void){

	LCDClear();
	
	while(i<4){
     880:	80 91 c4 02 	lds	r24, 0x02C4
     884:	84 30       	cpi	r24, 0x04	; 4
     886:	d0 f3       	brcs	.-12     	; 0x87c <user1+0xe>
     888:	c8 ec       	ldi	r28, 0xC8	; 200
     88a:	d0 e0       	ldi	r29, 0x00	; 0
		password();
	}
	
	while(1){
		if(epw[0] == user1cpw[0] && epw[1] == user1cpw[1] && epw[2] == user1cpw[2] && epw[3] == user1cpw[3]){
     88c:	90 91 c6 02 	lds	r25, 0x02C6
     890:	80 91 9d 02 	lds	r24, 0x029D
     894:	98 17       	cp	r25, r24
     896:	71 f5       	brne	.+92     	; 0x8f4 <user1+0x86>
     898:	90 91 c7 02 	lds	r25, 0x02C7
     89c:	80 91 9e 02 	lds	r24, 0x029E
     8a0:	98 17       	cp	r25, r24
     8a2:	41 f5       	brne	.+80     	; 0x8f4 <user1+0x86>
     8a4:	90 91 c8 02 	lds	r25, 0x02C8
     8a8:	80 91 9f 02 	lds	r24, 0x029F
     8ac:	98 17       	cp	r25, r24
     8ae:	11 f5       	brne	.+68     	; 0x8f4 <user1+0x86>
     8b0:	90 91 c9 02 	lds	r25, 0x02C9
     8b4:	80 91 a0 02 	lds	r24, 0x02A0
     8b8:	98 17       	cp	r25, r24
     8ba:	e1 f4       	brne	.+56     	; 0x8f4 <user1+0x86>
			LCDClear();
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Door Opened ");
     8c4:	80 e0       	ldi	r24, 0x00	; 0
     8c6:	60 e0       	ldi	r22, 0x00	; 0
     8c8:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     8cc:	83 ed       	ldi	r24, 0xD3	; 211
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			PORTA|= (1<<0);
     8d4:	d8 9a       	sbi	0x1b, 0	; 27
			PORTA|= (1<<3);
     8d6:	db 9a       	sbi	0x1b, 3	; 27
     8d8:	80 e4       	ldi	r24, 0x40	; 64
     8da:	9c e9       	ldi	r25, 0x9C	; 156
     8dc:	28 ec       	ldi	r18, 0xC8	; 200
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	f9 01       	movw	r30, r18
     8e2:	31 97       	sbiw	r30, 0x01	; 1
     8e4:	f1 f7       	brne	.-4      	; 0x8e2 <user1+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8e6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8e8:	d9 f7       	brne	.-10     	; 0x8e0 <user1+0x72>
			_delay_ms(4000);
			PORTA &= ~(1<<0);
     8ea:	d8 98       	cbi	0x1b, 0	; 27
			PORTA &= ~(1<<3);
     8ec:	db 98       	cbi	0x1b, 3	; 27
			LCDWriteStringXY(0,0,"ReEnter Password ");
			i=0;
			user1();	
		}
	}
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	08 95       	ret
			_delay_ms(4000);
			PORTA &= ~(1<<0);
			PORTA &= ~(1<<3);
			break;
		}else {
			LCDClear();
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	60 e0       	ldi	r22, 0x00	; 0
     8f8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Wrong Password ");
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	60 e0       	ldi	r22, 0x00	; 0
     900:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     904:	80 ee       	ldi	r24, 0xE0	; 224
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			LCDWriteStringXY(0,1,"ReEnter Password ");
     90c:	80 e0       	ldi	r24, 0x00	; 0
     90e:	61 e0       	ldi	r22, 0x01	; 1
     910:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     914:	81 ec       	ldi	r24, 0xC1	; 193
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     91c:	80 e1       	ldi	r24, 0x10	; 16
     91e:	97 e2       	ldi	r25, 0x27	; 39
     920:	fe 01       	movw	r30, r28
     922:	31 97       	sbiw	r30, 0x01	; 1
     924:	f1 f7       	brne	.-4      	; 0x922 <user1+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     926:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     928:	d9 f7       	brne	.-10     	; 0x920 <user1+0xb2>
			_delay_ms(1000);
			LCDClear();
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	60 e0       	ldi	r22, 0x00	; 0
     92e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"ReEnter Password ");
     932:	80 e0       	ldi	r24, 0x00	; 0
     934:	60 e0       	ldi	r22, 0x00	; 0
     936:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     93a:	81 ec       	ldi	r24, 0xC1	; 193
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			i=0;
     942:	10 92 c4 02 	sts	0x02C4, r1
			user1();	
     946:	0e 94 37 04 	call	0x86e	; 0x86e <user1>
     94a:	a0 cf       	rjmp	.-192    	; 0x88c <user1+0x1e>

0000094c <user2>:
		}
	}
}

//// Check user 2 password /////
void user2(void){
     94c:	cf 93       	push	r28
     94e:	df 93       	push	r29

	LCDClear();
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
     958:	02 c0       	rjmp	.+4      	; 0x95e <user2+0x12>
	
	while(i<4){
		password();
     95a:	0e 94 93 02 	call	0x526	; 0x526 <password>
//// Check user 2 password /////
void user2(void){

	LCDClear();
	
	while(i<4){
     95e:	80 91 c4 02 	lds	r24, 0x02C4
     962:	84 30       	cpi	r24, 0x04	; 4
     964:	d0 f3       	brcs	.-12     	; 0x95a <user2+0xe>
     966:	c8 ec       	ldi	r28, 0xC8	; 200
     968:	d0 e0       	ldi	r29, 0x00	; 0
		password();
	}
	
	while(1){
		if(epw[0] == user2cpw[0] && epw[1] == user2cpw[1] && epw[2] == user2cpw[2] && epw[3] == user2cpw[3]){
     96a:	90 91 c6 02 	lds	r25, 0x02C6
     96e:	80 91 a1 02 	lds	r24, 0x02A1
     972:	98 17       	cp	r25, r24
     974:	71 f5       	brne	.+92     	; 0x9d2 <user2+0x86>
     976:	90 91 c7 02 	lds	r25, 0x02C7
     97a:	80 91 a2 02 	lds	r24, 0x02A2
     97e:	98 17       	cp	r25, r24
     980:	41 f5       	brne	.+80     	; 0x9d2 <user2+0x86>
     982:	90 91 c8 02 	lds	r25, 0x02C8
     986:	80 91 a3 02 	lds	r24, 0x02A3
     98a:	98 17       	cp	r25, r24
     98c:	11 f5       	brne	.+68     	; 0x9d2 <user2+0x86>
     98e:	90 91 c9 02 	lds	r25, 0x02C9
     992:	80 91 a4 02 	lds	r24, 0x02A4
     996:	98 17       	cp	r25, r24
     998:	e1 f4       	brne	.+56     	; 0x9d2 <user2+0x86>
			LCDClear();
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Door Opened ");
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	60 e0       	ldi	r22, 0x00	; 0
     9a6:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     9aa:	83 ed       	ldi	r24, 0xD3	; 211
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			PORTA|= (1<<0);
     9b2:	d8 9a       	sbi	0x1b, 0	; 27
			PORTA|= (1<<4);
     9b4:	dc 9a       	sbi	0x1b, 4	; 27
     9b6:	80 e4       	ldi	r24, 0x40	; 64
     9b8:	9c e9       	ldi	r25, 0x9C	; 156
     9ba:	28 ec       	ldi	r18, 0xC8	; 200
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	f9 01       	movw	r30, r18
     9c0:	31 97       	sbiw	r30, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <user2+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     9c4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     9c6:	d9 f7       	brne	.-10     	; 0x9be <user2+0x72>
			_delay_ms(4000);
			PORTA &= ~(1<<0);
     9c8:	d8 98       	cbi	0x1b, 0	; 27
			PORTA &= ~(1<<4);
     9ca:	dc 98       	cbi	0x1b, 4	; 27
			LCDWriteStringXY(0,0,"ReEnter Password ");
			i=0;
			user2();	
		}
	}
}
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret
			_delay_ms(4000);
			PORTA &= ~(1<<0);
			PORTA &= ~(1<<4);
			break;
		}else {
			LCDClear();
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Wrong Password ");
     9da:	80 e0       	ldi	r24, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     9e2:	80 ee       	ldi	r24, 0xE0	; 224
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			LCDWriteStringXY(0,1,"ReEnter Password ");
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	61 e0       	ldi	r22, 0x01	; 1
     9ee:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     9f2:	81 ec       	ldi	r24, 0xC1	; 193
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     9fa:	80 e1       	ldi	r24, 0x10	; 16
     9fc:	97 e2       	ldi	r25, 0x27	; 39
     9fe:	fe 01       	movw	r30, r28
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	f1 f7       	brne	.-4      	; 0xa00 <user2+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a04:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a06:	d9 f7       	brne	.-10     	; 0x9fe <user2+0xb2>
			_delay_ms(1000);
			LCDClear();
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"ReEnter Password ");
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     a18:	81 ec       	ldi	r24, 0xC1	; 193
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			i=0;
     a20:	10 92 c4 02 	sts	0x02C4, r1
			user2();	
     a24:	0e 94 a6 04 	call	0x94c	; 0x94c <user2>
     a28:	a0 cf       	rjmp	.-192    	; 0x96a <user2+0x1e>

00000a2a <newuser>:
		}
	}
}

//// Check newuser password /////
void newuser(void){
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29

	LCDClear();
     a2e:	81 e0       	ldi	r24, 0x01	; 1
     a30:	60 e0       	ldi	r22, 0x00	; 0
     a32:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
     a36:	02 c0       	rjmp	.+4      	; 0xa3c <newuser+0x12>
	
	while(i<4){
		password();
     a38:	0e 94 93 02 	call	0x526	; 0x526 <password>
//// Check newuser password /////
void newuser(void){

	LCDClear();
	
	while(i<4){
     a3c:	80 91 c4 02 	lds	r24, 0x02C4
     a40:	84 30       	cpi	r24, 0x04	; 4
     a42:	d0 f3       	brcs	.-12     	; 0xa38 <newuser+0xe>
     a44:	c8 ec       	ldi	r28, 0xC8	; 200
     a46:	d0 e0       	ldi	r29, 0x00	; 0
		password();
	}
	
	while(1){
		if(epw[0] == newusercpw[0] && epw[1] == newusercpw[1] && epw[2] == newusercpw[2] && epw[3] == newusercpw[3]){
     a48:	90 91 c6 02 	lds	r25, 0x02C6
     a4c:	80 91 cf 02 	lds	r24, 0x02CF
     a50:	98 17       	cp	r25, r24
     a52:	71 f5       	brne	.+92     	; 0xab0 <newuser+0x86>
     a54:	90 91 c7 02 	lds	r25, 0x02C7
     a58:	80 91 d0 02 	lds	r24, 0x02D0
     a5c:	98 17       	cp	r25, r24
     a5e:	41 f5       	brne	.+80     	; 0xab0 <newuser+0x86>
     a60:	90 91 c8 02 	lds	r25, 0x02C8
     a64:	80 91 d1 02 	lds	r24, 0x02D1
     a68:	98 17       	cp	r25, r24
     a6a:	11 f5       	brne	.+68     	; 0xab0 <newuser+0x86>
     a6c:	90 91 c9 02 	lds	r25, 0x02C9
     a70:	80 91 d2 02 	lds	r24, 0x02D2
     a74:	98 17       	cp	r25, r24
     a76:	e1 f4       	brne	.+56     	; 0xab0 <newuser+0x86>
			LCDClear();
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Door Opened ");
     a80:	80 e0       	ldi	r24, 0x00	; 0
     a82:	60 e0       	ldi	r22, 0x00	; 0
     a84:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     a88:	83 ed       	ldi	r24, 0xD3	; 211
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			PORTA|= (1<<0);
     a90:	d8 9a       	sbi	0x1b, 0	; 27
			PORTA|= (1<<5);
     a92:	dd 9a       	sbi	0x1b, 5	; 27
     a94:	80 e4       	ldi	r24, 0x40	; 64
     a96:	9c e9       	ldi	r25, 0x9C	; 156
     a98:	28 ec       	ldi	r18, 0xC8	; 200
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	f9 01       	movw	r30, r18
     a9e:	31 97       	sbiw	r30, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <newuser+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     aa2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     aa4:	d9 f7       	brne	.-10     	; 0xa9c <newuser+0x72>
			_delay_ms(4000);
			PORTA &= ~(1<<0);
     aa6:	d8 98       	cbi	0x1b, 0	; 27
			PORTA &= ~(1<<5);
     aa8:	dd 98       	cbi	0x1b, 5	; 27
			LCDWriteStringXY(0,0,"ReEnter Password ");
			i=0;
			newuser();	
		}
	}
}
     aaa:	df 91       	pop	r29
     aac:	cf 91       	pop	r28
     aae:	08 95       	ret
			_delay_ms(4000);
			PORTA &= ~(1<<0);
			PORTA &= ~(1<<5);
			break;
		}else {
			LCDClear();
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Wrong Password ");
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     ac0:	80 ee       	ldi	r24, 0xE0	; 224
     ac2:	90 e0       	ldi	r25, 0x00	; 0
     ac4:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			LCDWriteStringXY(0,1,"ReEnter Password ");
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     ad0:	81 ec       	ldi	r24, 0xC1	; 193
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     ad8:	80 e1       	ldi	r24, 0x10	; 16
     ada:	97 e2       	ldi	r25, 0x27	; 39
     adc:	fe 01       	movw	r30, r28
     ade:	31 97       	sbiw	r30, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <newuser+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ae2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ae4:	d9 f7       	brne	.-10     	; 0xadc <newuser+0xb2>
			_delay_ms(1000);
			LCDClear();
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"ReEnter Password ");
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	60 e0       	ldi	r22, 0x00	; 0
     af2:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     af6:	81 ec       	ldi	r24, 0xC1	; 193
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			i=0;
     afe:	10 92 c4 02 	sts	0x02C4, r1
			newuser();	
     b02:	0e 94 15 05 	call	0xa2a	; 0xa2a <newuser>
     b06:	a0 cf       	rjmp	.-192    	; 0xa48 <newuser+0x1e>

00000b08 <admin_check_password>:
		} 
	}
}

///// Check admin password /////
void admin_check_password(void){
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29

	LCDClear();
     b0c:	81 e0       	ldi	r24, 0x01	; 1
     b0e:	60 e0       	ldi	r22, 0x00	; 0
     b10:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
     b14:	02 c0       	rjmp	.+4      	; 0xb1a <admin_check_password+0x12>
	
	while(i<4){
		password();
     b16:	0e 94 93 02 	call	0x526	; 0x526 <password>
///// Check admin password /////
void admin_check_password(void){

	LCDClear();
	
	while(i<4){
     b1a:	80 91 c4 02 	lds	r24, 0x02C4
     b1e:	84 30       	cpi	r24, 0x04	; 4
     b20:	d0 f3       	brcs	.-12     	; 0xb16 <admin_check_password+0xe>
     b22:	c8 ec       	ldi	r28, 0xC8	; 200
     b24:	d0 e0       	ldi	r29, 0x00	; 0
		password();
	}
	while(1){
		if(epw[0] == admincpw[0] && epw[1] == admincpw[1] && epw[2] == admincpw[2] && epw[3] == admincpw[3] ){
     b26:	90 91 c6 02 	lds	r25, 0x02C6
     b2a:	80 91 99 02 	lds	r24, 0x0299
     b2e:	98 17       	cp	r25, r24
     b30:	71 f5       	brne	.+92     	; 0xb8e <admin_check_password+0x86>
     b32:	90 91 c7 02 	lds	r25, 0x02C7
     b36:	80 91 9a 02 	lds	r24, 0x029A
     b3a:	98 17       	cp	r25, r24
     b3c:	41 f5       	brne	.+80     	; 0xb8e <admin_check_password+0x86>
     b3e:	90 91 c8 02 	lds	r25, 0x02C8
     b42:	80 91 9b 02 	lds	r24, 0x029B
     b46:	98 17       	cp	r25, r24
     b48:	11 f5       	brne	.+68     	; 0xb8e <admin_check_password+0x86>
     b4a:	90 91 c9 02 	lds	r25, 0x02C9
     b4e:	80 91 9c 02 	lds	r24, 0x029C
     b52:	98 17       	cp	r25, r24
     b54:	e1 f4       	brne	.+56     	; 0xb8e <admin_check_password+0x86>
			LCDClear();
     b56:	81 e0       	ldi	r24, 0x01	; 1
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Door Opened ");
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	60 e0       	ldi	r22, 0x00	; 0
     b62:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     b66:	83 ed       	ldi	r24, 0xD3	; 211
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			PORTA|= (1<<0);
     b6e:	d8 9a       	sbi	0x1b, 0	; 27
			PORTA|= (1<<6);
     b70:	de 9a       	sbi	0x1b, 6	; 27
     b72:	80 e4       	ldi	r24, 0x40	; 64
     b74:	9c e9       	ldi	r25, 0x9C	; 156
     b76:	28 ec       	ldi	r18, 0xC8	; 200
     b78:	30 e0       	ldi	r19, 0x00	; 0
     b7a:	f9 01       	movw	r30, r18
     b7c:	31 97       	sbiw	r30, 0x01	; 1
     b7e:	f1 f7       	brne	.-4      	; 0xb7c <admin_check_password+0x74>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b80:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b82:	d9 f7       	brne	.-10     	; 0xb7a <admin_check_password+0x72>
			_delay_ms(4000);
			PORTA &= ~(1<<0);
     b84:	d8 98       	cbi	0x1b, 0	; 27
			PORTA &= ~(1<<6);
     b86:	de 98       	cbi	0x1b, 6	; 27
			LCDWriteStringXY(0,0,"ReEnter Password ");
			i=0;
			admin_check_password();	
		}
	}
}
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret
			_delay_ms(4000);
			PORTA &= ~(1<<0);
			PORTA &= ~(1<<6);
			break;
		}else {
			LCDClear();
     b8e:	81 e0       	ldi	r24, 0x01	; 1
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Wrong Password ");
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     b9e:	80 ee       	ldi	r24, 0xE0	; 224
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			LCDWriteStringXY(0,1,"ReEnter Password ");
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     bae:	81 ec       	ldi	r24, 0xC1	; 193
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     bb6:	80 e1       	ldi	r24, 0x10	; 16
     bb8:	97 e2       	ldi	r25, 0x27	; 39
     bba:	fe 01       	movw	r30, r28
     bbc:	31 97       	sbiw	r30, 0x01	; 1
     bbe:	f1 f7       	brne	.-4      	; 0xbbc <admin_check_password+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     bc0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     bc2:	d9 f7       	brne	.-10     	; 0xbba <admin_check_password+0xb2>
			_delay_ms(1000);
			LCDClear();
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"ReEnter Password ");
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     bd4:	81 ec       	ldi	r24, 0xC1	; 193
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			i=0;
     bdc:	10 92 c4 02 	sts	0x02C4, r1
			admin_check_password();	
     be0:	0e 94 84 05 	call	0xb08	; 0xb08 <admin_check_password>
     be4:	a0 cf       	rjmp	.-192    	; 0xb26 <admin_check_password+0x1e>

00000be6 <admin_reset_password_check>:
		}
	}
}

///// Set reset password for admin /////
void admin_reset_password_check(void){
     be6:	cf 93       	push	r28
     be8:	df 93       	push	r29
     bea:	c8 ec       	ldi	r28, 0xC8	; 200
     bec:	d0 e0       	ldi	r29, 0x00	; 0

	reset_password_check1();
     bee:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_password_check1>
	
	if(epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] ){
     bf2:	40 91 c6 02 	lds	r20, 0x02C6
     bf6:	80 91 cb 02 	lds	r24, 0x02CB
     bfa:	48 17       	cp	r20, r24
     bfc:	c1 f5       	brne	.+112    	; 0xc6e <admin_reset_password_check+0x88>
     bfe:	30 91 c7 02 	lds	r19, 0x02C7
     c02:	80 91 cc 02 	lds	r24, 0x02CC
     c06:	38 17       	cp	r19, r24
     c08:	91 f5       	brne	.+100    	; 0xc6e <admin_reset_password_check+0x88>
     c0a:	20 91 c8 02 	lds	r18, 0x02C8
     c0e:	80 91 cd 02 	lds	r24, 0x02CD
     c12:	28 17       	cp	r18, r24
     c14:	61 f5       	brne	.+88     	; 0xc6e <admin_reset_password_check+0x88>
     c16:	90 91 c9 02 	lds	r25, 0x02C9
     c1a:	80 91 ce 02 	lds	r24, 0x02CE
     c1e:	98 17       	cp	r25, r24
     c20:	31 f5       	brne	.+76     	; 0xc6e <admin_reset_password_check+0x88>
		unsigned j=0;
		for(j=0;j<4;j++){
			admincpw[j] = rpw[j];
     c22:	40 93 99 02 	sts	0x0299, r20
     c26:	30 93 9a 02 	sts	0x029A, r19
     c2a:	20 93 9b 02 	sts	0x029B, r18
     c2e:	90 93 9c 02 	sts	0x029C, r25
		}
		LCDClear();
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Password Reset");
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	60 e0       	ldi	r22, 0x00	; 0
     c3e:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     c42:	82 ea       	ldi	r24, 0xA2	; 162
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"Done ");
     c4a:	80 e0       	ldi	r24, 0x00	; 0
     c4c:	61 e0       	ldi	r22, 0x01	; 1
     c4e:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     c52:	81 eb       	ldi	r24, 0xB1	; 177
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     c5a:	80 e1       	ldi	r24, 0x10	; 16
     c5c:	97 e2       	ldi	r25, 0x27	; 39
     c5e:	28 ec       	ldi	r18, 0xC8	; 200
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	31 97       	sbiw	r30, 0x01	; 1
     c66:	f1 f7       	brne	.-4      	; 0xc64 <admin_reset_password_check+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c68:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c6a:	d9 f7       	brne	.-10     	; 0xc62 <admin_reset_password_check+0x7c>
     c6c:	2a c0       	rjmp	.+84     	; 0xcc2 <admin_reset_password_check+0xdc>
		_delay_ms(1000);
	}
	else {
		LCDClear();
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	60 e0       	ldi	r22, 0x00	; 0
     c72:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Wrong New");
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     c7e:	87 eb       	ldi	r24, 0xB7	; 183
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"ReEnter Password ");
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     c8e:	81 ec       	ldi	r24, 0xC1	; 193
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     c96:	80 e1       	ldi	r24, 0x10	; 16
     c98:	97 e2       	ldi	r25, 0x27	; 39
     c9a:	fe 01       	movw	r30, r28
     c9c:	31 97       	sbiw	r30, 0x01	; 1
     c9e:	f1 f7       	brne	.-4      	; 0xc9c <admin_reset_password_check+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ca2:	d9 f7       	brne	.-10     	; 0xc9a <admin_reset_password_check+0xb4>
		_delay_ms(1000);
		LCDClear();
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"ReEnter Password ");
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     cb4:	81 ec       	ldi	r24, 0xC1	; 193
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		i=0;
     cbc:	10 92 c4 02 	sts	0x02C4, r1
     cc0:	96 cf       	rjmp	.-212    	; 0xbee <admin_reset_password_check+0x8>
		admin_reset_password_check();
	}
}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <user1_reset_password_check>:

///// Set reset password for user1 /////
void user1_reset_password_check(void){
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	c8 ec       	ldi	r28, 0xC8	; 200
     cce:	d0 e0       	ldi	r29, 0x00	; 0

	reset_password_check1();
     cd0:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_password_check1>
	
	if(epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] ){
     cd4:	40 91 c6 02 	lds	r20, 0x02C6
     cd8:	80 91 cb 02 	lds	r24, 0x02CB
     cdc:	48 17       	cp	r20, r24
     cde:	c1 f5       	brne	.+112    	; 0xd50 <user1_reset_password_check+0x88>
     ce0:	30 91 c7 02 	lds	r19, 0x02C7
     ce4:	80 91 cc 02 	lds	r24, 0x02CC
     ce8:	38 17       	cp	r19, r24
     cea:	91 f5       	brne	.+100    	; 0xd50 <user1_reset_password_check+0x88>
     cec:	20 91 c8 02 	lds	r18, 0x02C8
     cf0:	80 91 cd 02 	lds	r24, 0x02CD
     cf4:	28 17       	cp	r18, r24
     cf6:	61 f5       	brne	.+88     	; 0xd50 <user1_reset_password_check+0x88>
     cf8:	90 91 c9 02 	lds	r25, 0x02C9
     cfc:	80 91 ce 02 	lds	r24, 0x02CE
     d00:	98 17       	cp	r25, r24
     d02:	31 f5       	brne	.+76     	; 0xd50 <user1_reset_password_check+0x88>
		unsigned j=0;
		for(j=0;j<4;j++){
			user1cpw[j] = rpw[j];
     d04:	40 93 9d 02 	sts	0x029D, r20
     d08:	30 93 9e 02 	sts	0x029E, r19
     d0c:	20 93 9f 02 	sts	0x029F, r18
     d10:	90 93 a0 02 	sts	0x02A0, r25
		}
		LCDClear();
     d14:	81 e0       	ldi	r24, 0x01	; 1
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Password Reset");
     d1c:	80 e0       	ldi	r24, 0x00	; 0
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     d24:	82 ea       	ldi	r24, 0xA2	; 162
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"Done ");
     d2c:	80 e0       	ldi	r24, 0x00	; 0
     d2e:	61 e0       	ldi	r22, 0x01	; 1
     d30:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     d34:	81 eb       	ldi	r24, 0xB1	; 177
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     d3c:	80 e1       	ldi	r24, 0x10	; 16
     d3e:	97 e2       	ldi	r25, 0x27	; 39
     d40:	28 ec       	ldi	r18, 0xC8	; 200
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	f9 01       	movw	r30, r18
     d46:	31 97       	sbiw	r30, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <user1_reset_password_check+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d4c:	d9 f7       	brne	.-10     	; 0xd44 <user1_reset_password_check+0x7c>
     d4e:	2a c0       	rjmp	.+84     	; 0xda4 <user1_reset_password_check+0xdc>
		_delay_ms(1000);	
	}
	else {
		LCDClear();
     d50:	81 e0       	ldi	r24, 0x01	; 1
     d52:	60 e0       	ldi	r22, 0x00	; 0
     d54:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Wrong New");
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	60 e0       	ldi	r22, 0x00	; 0
     d5c:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     d60:	87 eb       	ldi	r24, 0xB7	; 183
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"ReEnter Password ");
     d68:	80 e0       	ldi	r24, 0x00	; 0
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     d70:	81 ec       	ldi	r24, 0xC1	; 193
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     d78:	80 e1       	ldi	r24, 0x10	; 16
     d7a:	97 e2       	ldi	r25, 0x27	; 39
     d7c:	fe 01       	movw	r30, r28
     d7e:	31 97       	sbiw	r30, 0x01	; 1
     d80:	f1 f7       	brne	.-4      	; 0xd7e <user1_reset_password_check+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d82:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d84:	d9 f7       	brne	.-10     	; 0xd7c <user1_reset_password_check+0xb4>
		_delay_ms(1000);
		LCDClear();
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"ReEnter Password ");
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     d96:	81 ec       	ldi	r24, 0xC1	; 193
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		i=0;
     d9e:	10 92 c4 02 	sts	0x02C4, r1
     da2:	96 cf       	rjmp	.-212    	; 0xcd0 <user1_reset_password_check+0x8>
		user1_reset_password_check();
	}
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <user2_reset_password_check>:

///// Set reset password for user2 /////
void user2_reset_password_check(void){
     daa:	cf 93       	push	r28
     dac:	df 93       	push	r29
     dae:	c8 ec       	ldi	r28, 0xC8	; 200
     db0:	d0 e0       	ldi	r29, 0x00	; 0

	reset_password_check1();
     db2:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_password_check1>
	
	if(epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] ){
     db6:	40 91 c6 02 	lds	r20, 0x02C6
     dba:	80 91 cb 02 	lds	r24, 0x02CB
     dbe:	48 17       	cp	r20, r24
     dc0:	c1 f5       	brne	.+112    	; 0xe32 <user2_reset_password_check+0x88>
     dc2:	30 91 c7 02 	lds	r19, 0x02C7
     dc6:	80 91 cc 02 	lds	r24, 0x02CC
     dca:	38 17       	cp	r19, r24
     dcc:	91 f5       	brne	.+100    	; 0xe32 <user2_reset_password_check+0x88>
     dce:	20 91 c8 02 	lds	r18, 0x02C8
     dd2:	80 91 cd 02 	lds	r24, 0x02CD
     dd6:	28 17       	cp	r18, r24
     dd8:	61 f5       	brne	.+88     	; 0xe32 <user2_reset_password_check+0x88>
     dda:	90 91 c9 02 	lds	r25, 0x02C9
     dde:	80 91 ce 02 	lds	r24, 0x02CE
     de2:	98 17       	cp	r25, r24
     de4:	31 f5       	brne	.+76     	; 0xe32 <user2_reset_password_check+0x88>
		unsigned j=0;
		for(j=0;j<4;j++){
			user2cpw[j] = rpw[j];
     de6:	40 93 a1 02 	sts	0x02A1, r20
     dea:	30 93 a2 02 	sts	0x02A2, r19
     dee:	20 93 a3 02 	sts	0x02A3, r18
     df2:	90 93 a4 02 	sts	0x02A4, r25
		}
		LCDClear();
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Password Reset");
     dfe:	80 e0       	ldi	r24, 0x00	; 0
     e00:	60 e0       	ldi	r22, 0x00	; 0
     e02:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     e06:	82 ea       	ldi	r24, 0xA2	; 162
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"Done ");;
     e0e:	80 e0       	ldi	r24, 0x00	; 0
     e10:	61 e0       	ldi	r22, 0x01	; 1
     e12:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     e16:	81 eb       	ldi	r24, 0xB1	; 177
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     e1e:	80 e1       	ldi	r24, 0x10	; 16
     e20:	97 e2       	ldi	r25, 0x27	; 39
     e22:	28 ec       	ldi	r18, 0xC8	; 200
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	f9 01       	movw	r30, r18
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <user2_reset_password_check+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e2c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e2e:	d9 f7       	brne	.-10     	; 0xe26 <user2_reset_password_check+0x7c>
     e30:	2a c0       	rjmp	.+84     	; 0xe86 <user2_reset_password_check+0xdc>
		_delay_ms(1000);
	}
	else {
		LCDClear();
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Wrong New");
     e3a:	80 e0       	ldi	r24, 0x00	; 0
     e3c:	60 e0       	ldi	r22, 0x00	; 0
     e3e:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     e42:	87 eb       	ldi	r24, 0xB7	; 183
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"ReEnter Password ");
     e4a:	80 e0       	ldi	r24, 0x00	; 0
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     e52:	81 ec       	ldi	r24, 0xC1	; 193
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     e5a:	80 e1       	ldi	r24, 0x10	; 16
     e5c:	97 e2       	ldi	r25, 0x27	; 39
     e5e:	fe 01       	movw	r30, r28
     e60:	31 97       	sbiw	r30, 0x01	; 1
     e62:	f1 f7       	brne	.-4      	; 0xe60 <user2_reset_password_check+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e64:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	d9 f7       	brne	.-10     	; 0xe5e <user2_reset_password_check+0xb4>
		_delay_ms(1000);
		LCDClear();
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"ReEnter Password ");
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     e78:	81 ec       	ldi	r24, 0xC1	; 193
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		i=0;
     e80:	10 92 c4 02 	sts	0x02C4, r1
     e84:	96 cf       	rjmp	.-212    	; 0xdb2 <user2_reset_password_check+0x8>
		 user2_reset_password_check();
	}
}
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <newuser_reset_password_check>:

///// Set reset password for newuser /////
void newuser_reset_password_check(void){
     e8c:	cf 93       	push	r28
     e8e:	df 93       	push	r29
     e90:	c8 ec       	ldi	r28, 0xC8	; 200
     e92:	d0 e0       	ldi	r29, 0x00	; 0

	reset_password_check1();
     e94:	0e 94 4e 03 	call	0x69c	; 0x69c <reset_password_check1>
	
	if(epw[0] == rpw[0] && epw[1] == rpw[1] && epw[2] == rpw[2] && epw[3] == rpw[3] ){
     e98:	40 91 c6 02 	lds	r20, 0x02C6
     e9c:	80 91 cb 02 	lds	r24, 0x02CB
     ea0:	48 17       	cp	r20, r24
     ea2:	c1 f5       	brne	.+112    	; 0xf14 <newuser_reset_password_check+0x88>
     ea4:	30 91 c7 02 	lds	r19, 0x02C7
     ea8:	80 91 cc 02 	lds	r24, 0x02CC
     eac:	38 17       	cp	r19, r24
     eae:	91 f5       	brne	.+100    	; 0xf14 <newuser_reset_password_check+0x88>
     eb0:	20 91 c8 02 	lds	r18, 0x02C8
     eb4:	80 91 cd 02 	lds	r24, 0x02CD
     eb8:	28 17       	cp	r18, r24
     eba:	61 f5       	brne	.+88     	; 0xf14 <newuser_reset_password_check+0x88>
     ebc:	90 91 c9 02 	lds	r25, 0x02C9
     ec0:	80 91 ce 02 	lds	r24, 0x02CE
     ec4:	98 17       	cp	r25, r24
     ec6:	31 f5       	brne	.+76     	; 0xf14 <newuser_reset_password_check+0x88>
		unsigned j=0;
		for(j=0;j<4;j++){
			newusercpw[j] = rpw[j];
     ec8:	40 93 cf 02 	sts	0x02CF, r20
     ecc:	30 93 d0 02 	sts	0x02D0, r19
     ed0:	20 93 d1 02 	sts	0x02D1, r18
     ed4:	90 93 d2 02 	sts	0x02D2, r25
		}
		LCDClear();
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	60 e0       	ldi	r22, 0x00	; 0
     edc:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Password Reset");
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     ee8:	82 ea       	ldi	r24, 0xA2	; 162
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"Done ");
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     ef8:	81 eb       	ldi	r24, 0xB1	; 177
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     f00:	80 e1       	ldi	r24, 0x10	; 16
     f02:	97 e2       	ldi	r25, 0x27	; 39
     f04:	28 ec       	ldi	r18, 0xC8	; 200
     f06:	30 e0       	ldi	r19, 0x00	; 0
     f08:	f9 01       	movw	r30, r18
     f0a:	31 97       	sbiw	r30, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <newuser_reset_password_check+0x7e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f0e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f10:	d9 f7       	brne	.-10     	; 0xf08 <newuser_reset_password_check+0x7c>
     f12:	2a c0       	rjmp	.+84     	; 0xf68 <newuser_reset_password_check+0xdc>
		_delay_ms(1000);	
	}
	else {
		LCDClear();
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"Wrong New");
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     f24:	87 eb       	ldi	r24, 0xB7	; 183
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"ReEnter Password ");
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     f34:	81 ec       	ldi	r24, 0xC1	; 193
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     f3c:	80 e1       	ldi	r24, 0x10	; 16
     f3e:	97 e2       	ldi	r25, 0x27	; 39
     f40:	fe 01       	movw	r30, r28
     f42:	31 97       	sbiw	r30, 0x01	; 1
     f44:	f1 f7       	brne	.-4      	; 0xf42 <newuser_reset_password_check+0xb6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f46:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f48:	d9 f7       	brne	.-10     	; 0xf40 <newuser_reset_password_check+0xb4>
		_delay_ms(1000);
		LCDClear();
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	60 e0       	ldi	r22, 0x00	; 0
     f4e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0,"ReEnter Password ");
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     f5a:	81 ec       	ldi	r24, 0xC1	; 193
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		i=0;
     f62:	10 92 c4 02 	sts	0x02C4, r1
     f66:	96 cf       	rjmp	.-212    	; 0xe94 <newuser_reset_password_check+0x8>
		newuser_reset_password_check();
	}
}
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <admin_reset>:
	}
}

///// Select user for reset password /////
void admin_reset(void){
	LCDClear();
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Press 1 Reset");
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     f7e:	80 ef       	ldi	r24, 0xF0	; 240
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(0,1,"Admin Password");
     f86:	80 e0       	ldi	r24, 0x00	; 0
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     f8e:	8e ef       	ldi	r24, 0xFE	; 254
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     f96:	80 e1       	ldi	r24, 0x10	; 16
     f98:	97 e2       	ldi	r25, 0x27	; 39
     f9a:	28 ec       	ldi	r18, 0xC8	; 200
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	f9 01       	movw	r30, r18
     fa0:	31 97       	sbiw	r30, 0x01	; 1
     fa2:	f1 f7       	brne	.-4      	; 0xfa0 <admin_reset+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	d9 f7       	brne	.-10     	; 0xf9e <admin_reset+0x30>
	_delay_ms(1000);
	LCDClear();
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	60 e0       	ldi	r22, 0x00	; 0
     fac:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Press 2 Reset");
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     fb8:	8d e0       	ldi	r24, 0x0D	; 13
     fba:	91 e0       	ldi	r25, 0x01	; 1
     fbc:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(0,1,"User01 Password");
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     fc8:	8b e1       	ldi	r24, 0x1B	; 27
     fca:	91 e0       	ldi	r25, 0x01	; 1
     fcc:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
     fd0:	80 e1       	ldi	r24, 0x10	; 16
     fd2:	97 e2       	ldi	r25, 0x27	; 39
     fd4:	28 ec       	ldi	r18, 0xC8	; 200
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	f9 01       	movw	r30, r18
     fda:	31 97       	sbiw	r30, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <admin_reset+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fde:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fe0:	d9 f7       	brne	.-10     	; 0xfd8 <admin_reset+0x6a>
	_delay_ms(1000);
	LCDClear();
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Press 3 Reset");
     fea:	80 e0       	ldi	r24, 0x00	; 0
     fec:	60 e0       	ldi	r22, 0x00	; 0
     fee:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
     ff2:	8b e2       	ldi	r24, 0x2B	; 43
     ff4:	91 e0       	ldi	r25, 0x01	; 1
     ff6:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(0,1,"User02 Password");
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	61 e0       	ldi	r22, 0x01	; 1
     ffe:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1002:	89 e3       	ldi	r24, 0x39	; 57
    1004:	91 e0       	ldi	r25, 0x01	; 1
    1006:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    100a:	80 e1       	ldi	r24, 0x10	; 16
    100c:	97 e2       	ldi	r25, 0x27	; 39
    100e:	28 ec       	ldi	r18, 0xC8	; 200
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	f9 01       	movw	r30, r18
    1014:	31 97       	sbiw	r30, 0x01	; 1
    1016:	f1 f7       	brne	.-4      	; 0x1014 <admin_reset+0xa6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1018:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    101a:	d9 f7       	brne	.-10     	; 0x1012 <admin_reset+0xa4>
	_delay_ms(1000);
	if(newusercpw[3]!=0){
    101c:	80 91 d2 02 	lds	r24, 0x02D2
    1020:	88 23       	and	r24, r24
    1022:	c9 f0       	breq	.+50     	; 0x1056 <admin_reset+0xe8>
		LCDWriteStringXY(0,0,"Press 4 Reset");
    1024:	80 e0       	ldi	r24, 0x00	; 0
    1026:	60 e0       	ldi	r22, 0x00	; 0
    1028:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    102c:	89 e4       	ldi	r24, 0x49	; 73
    102e:	91 e0       	ldi	r25, 0x01	; 1
    1030:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		LCDWriteStringXY(0,1,"New user Password");
    1034:	80 e0       	ldi	r24, 0x00	; 0
    1036:	61 e0       	ldi	r22, 0x01	; 1
    1038:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    103c:	87 e5       	ldi	r24, 0x57	; 87
    103e:	91 e0       	ldi	r25, 0x01	; 1
    1040:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    1044:	80 e1       	ldi	r24, 0x10	; 16
    1046:	97 e2       	ldi	r25, 0x27	; 39
    1048:	28 ec       	ldi	r18, 0xC8	; 200
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	f9 01       	movw	r30, r18
    104e:	31 97       	sbiw	r30, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <admin_reset+0xe0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1052:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1054:	d9 f7       	brne	.-10     	; 0x104c <admin_reset+0xde>
		_delay_ms(1000);
	}
	
	LCDClear();
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Enter");
    105e:	80 e0       	ldi	r24, 0x00	; 0
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1066:	89 e6       	ldi	r24, 0x69	; 105
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	
	while(1){
		key();
    106e:	0e 94 8e 02 	call	0x51c	; 0x51c <key>
		if(pw == '1'){
    1072:	80 91 d4 02 	lds	r24, 0x02D4
    1076:	81 33       	cpi	r24, 0x31	; 49
    1078:	c1 f4       	brne	.+48     	; 0x10aa <admin_reset+0x13c>
			LCDClear();
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Admin Password");
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    108a:	8e ef       	ldi	r24, 0xFE	; 254
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    1092:	80 e1       	ldi	r24, 0x10	; 16
    1094:	97 e2       	ldi	r25, 0x27	; 39
    1096:	28 ec       	ldi	r18, 0xC8	; 200
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	f9 01       	movw	r30, r18
    109c:	31 97       	sbiw	r30, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <admin_reset+0x12e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10a2:	d9 f7       	brne	.-10     	; 0x109a <admin_reset+0x12c>
			_delay_ms(1000);
			admin_reset_password_check();
    10a4:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <admin_reset_password_check>
    10a8:	08 95       	ret
			break;
		}else if(pw == '2'){
    10aa:	82 33       	cpi	r24, 0x32	; 50
    10ac:	c1 f4       	brne	.+48     	; 0x10de <admin_reset+0x170>
			LCDClear();
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"User1 Password");
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    10be:	8f e6       	ldi	r24, 0x6F	; 111
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    10c6:	80 e1       	ldi	r24, 0x10	; 16
    10c8:	97 e2       	ldi	r25, 0x27	; 39
    10ca:	28 ec       	ldi	r18, 0xC8	; 200
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	f9 01       	movw	r30, r18
    10d0:	31 97       	sbiw	r30, 0x01	; 1
    10d2:	f1 f7       	brne	.-4      	; 0x10d0 <admin_reset+0x162>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10d6:	d9 f7       	brne	.-10     	; 0x10ce <admin_reset+0x160>
			_delay_ms(1000);
			user1_reset_password_check();
    10d8:	0e 94 64 06 	call	0xcc8	; 0xcc8 <user1_reset_password_check>
    10dc:	08 95       	ret
			break;
		}else if (pw == '3'){
    10de:	83 33       	cpi	r24, 0x33	; 51
    10e0:	c1 f4       	brne	.+48     	; 0x1112 <admin_reset+0x1a4>
			LCDClear();
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"User2 Password");
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    10f2:	8e e7       	ldi	r24, 0x7E	; 126
    10f4:	91 e0       	ldi	r25, 0x01	; 1
    10f6:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    10fa:	80 e1       	ldi	r24, 0x10	; 16
    10fc:	97 e2       	ldi	r25, 0x27	; 39
    10fe:	28 ec       	ldi	r18, 0xC8	; 200
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	f9 01       	movw	r30, r18
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	f1 f7       	brne	.-4      	; 0x1104 <admin_reset+0x196>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1108:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    110a:	d9 f7       	brne	.-10     	; 0x1102 <admin_reset+0x194>
			_delay_ms(1000);
			user2_reset_password_check();
    110c:	0e 94 d5 06 	call	0xdaa	; 0xdaa <user2_reset_password_check>
    1110:	08 95       	ret
			break;
		}else if (pw == '4'){
    1112:	84 33       	cpi	r24, 0x34	; 52
    1114:	09 f0       	breq	.+2      	; 0x1118 <admin_reset+0x1aa>
    1116:	ab cf       	rjmp	.-170    	; 0x106e <admin_reset+0x100>
			LCDClear();
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Newuser Password");
    1120:	80 e0       	ldi	r24, 0x00	; 0
    1122:	60 e0       	ldi	r22, 0x00	; 0
    1124:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1128:	8d e8       	ldi	r24, 0x8D	; 141
    112a:	91 e0       	ldi	r25, 0x01	; 1
    112c:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    1130:	80 e1       	ldi	r24, 0x10	; 16
    1132:	97 e2       	ldi	r25, 0x27	; 39
    1134:	28 ec       	ldi	r18, 0xC8	; 200
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	f9 01       	movw	r30, r18
    113a:	31 97       	sbiw	r30, 0x01	; 1
    113c:	f1 f7       	brne	.-4      	; 0x113a <admin_reset+0x1cc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    113e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1140:	d9 f7       	brne	.-10     	; 0x1138 <admin_reset+0x1ca>
			_delay_ms(1000);
			newuser_reset_password_check();
    1142:	0e 94 46 07 	call	0xe8c	; 0xe8c <newuser_reset_password_check>
    1146:	08 95       	ret

00001148 <enroll_new_card>:
	}
}

///// Enroll new card/////
void enroll_new_card(void){
	LCDClear();
    1148:	81 e0       	ldi	r24, 0x01	; 1
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Show Card ");
    1150:	80 e0       	ldi	r24, 0x00	; 0
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1158:	8e e9       	ldi	r24, 0x9E	; 158
    115a:	91 e0       	ldi	r25, 0x01	; 1
    115c:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    1160:	80 e1       	ldi	r24, 0x10	; 16
    1162:	97 e2       	ldi	r25, 0x27	; 39
    1164:	28 ec       	ldi	r18, 0xC8	; 200
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	f9 01       	movw	r30, r18
    116a:	31 97       	sbiw	r30, 0x01	; 1
    116c:	f1 f7       	brne	.-4      	; 0x116a <enroll_new_card+0x22>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1170:	d9 f7       	brne	.-10     	; 0x1168 <enroll_new_card+0x20>
	_delay_ms(1000);
	while(1){
		card_check();
    1172:	0e 94 ee 01 	call	0x3dc	; 0x3dc <card_check>
		if(card_num!=1 && card_num!=2 && card_num!=3 && card_num!=4){
    1176:	80 91 c5 02 	lds	r24, 0x02C5
    117a:	81 50       	subi	r24, 0x01	; 1
    117c:	84 30       	cpi	r24, 0x04	; 4
    117e:	c8 f3       	brcs	.-14     	; 0x1172 <enroll_new_card+0x2a>
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	48 ec       	ldi	r20, 0xC8	; 200
    1186:	50 e0       	ldi	r21, 0x00	; 0
			for(unsigned char j=0;j<10;j++){
				new_user[j] = data[j];
    1188:	f9 01       	movw	r30, r18
    118a:	e1 52       	subi	r30, 0x21	; 33
    118c:	fd 4f       	sbci	r31, 0xFD	; 253
    118e:	d9 01       	movw	r26, r18
    1190:	ab 52       	subi	r26, 0x2B	; 43
    1192:	bd 4f       	sbci	r27, 0xFD	; 253
    1194:	8c 91       	ld	r24, X
    1196:	80 83       	st	Z, r24
				PORTA |= (1<<7);
    1198:	df 9a       	sbi	0x1b, 7	; 27
    119a:	88 ee       	ldi	r24, 0xE8	; 232
    119c:	93 e0       	ldi	r25, 0x03	; 3
    119e:	fa 01       	movw	r30, r20
    11a0:	31 97       	sbiw	r30, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <enroll_new_card+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11a4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a6:	d9 f7       	brne	.-10     	; 0x119e <enroll_new_card+0x56>
				_delay_ms(100);
				PORTA &= ~(1<<7);
    11a8:	df 98       	cbi	0x1b, 7	; 27
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
	LCDWriteStringXY(0,0,"Show Card ");
	_delay_ms(1000);
	while(1){
		card_check();
		if(card_num!=1 && card_num!=2 && card_num!=3 && card_num!=4){
			for(unsigned char j=0;j<10;j++){
    11ae:	2a 30       	cpi	r18, 0x0A	; 10
    11b0:	31 05       	cpc	r19, r1
    11b2:	51 f7       	brne	.-44     	; 0x1188 <enroll_new_card+0x40>
				PORTA |= (1<<7);
				_delay_ms(100);
				PORTA &= ~(1<<7);
			}
			
			LCDClear();
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Enter New");
    11bc:	80 e0       	ldi	r24, 0x00	; 0
    11be:	60 e0       	ldi	r22, 0x00	; 0
    11c0:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    11c4:	88 e9       	ldi	r24, 0x98	; 152
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
			LCDWriteStringXY(0,1,"Password ");
    11cc:	80 e0       	ldi	r24, 0x00	; 0
    11ce:	61 e0       	ldi	r22, 0x01	; 1
    11d0:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    11d4:	81 e8       	ldi	r24, 0x81	; 129
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    11dc:	80 e1       	ldi	r24, 0x10	; 16
    11de:	97 e2       	ldi	r25, 0x27	; 39
    11e0:	28 ec       	ldi	r18, 0xC8	; 200
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	f9 01       	movw	r30, r18
    11e6:	31 97       	sbiw	r30, 0x01	; 1
    11e8:	f1 f7       	brne	.-4      	; 0x11e6 <enroll_new_card+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11ea:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ec:	d9 f7       	brne	.-10     	; 0x11e4 <enroll_new_card+0x9c>
			_delay_ms(1000);
			
			i=0;
    11ee:	10 92 c4 02 	sts	0x02C4, r1
			password();
    11f2:	0e 94 93 02 	call	0x526	; 0x526 <password>
			
			for(unsigned char j=0;j<4;j++){
				newusercpw[j] = epw[j];
    11f6:	80 91 c6 02 	lds	r24, 0x02C6
    11fa:	80 93 cf 02 	sts	0x02CF, r24
    11fe:	80 91 c7 02 	lds	r24, 0x02C7
    1202:	80 93 d0 02 	sts	0x02D0, r24
    1206:	80 91 c8 02 	lds	r24, 0x02C8
    120a:	80 93 d1 02 	sts	0x02D1, r24
    120e:	80 91 c9 02 	lds	r24, 0x02C9
    1212:	80 93 d2 02 	sts	0x02D2, r24
			}
			
			LCDClear();
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Password Set");
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	60 e0       	ldi	r22, 0x00	; 0
    1222:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1226:	89 ea       	ldi	r24, 0xA9	; 169
    1228:	91 e0       	ldi	r25, 0x01	; 1
    122a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    122e:	80 e1       	ldi	r24, 0x10	; 16
    1230:	97 e2       	ldi	r25, 0x27	; 39
    1232:	28 ec       	ldi	r18, 0xC8	; 200
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	f9 01       	movw	r30, r18
    1238:	31 97       	sbiw	r30, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <enroll_new_card+0xf0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    123e:	d9 f7       	brne	.-10     	; 0x1236 <enroll_new_card+0xee>
			_delay_ms(1000);
			break;
		}
	}
}
    1240:	08 95       	ret

00001242 <admin>:

}

///// Select Admin card functions /////
void admin(void){
	LCDClear();
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	60 e0       	ldi	r22, 0x00	; 0
    1246:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Press 1");
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	60 e0       	ldi	r22, 0x00	; 0
    124e:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1252:	86 eb       	ldi	r24, 0xB6	; 182
    1254:	91 e0       	ldi	r25, 0x01	; 1
    1256:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(0,1,"Open Door");
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	61 e0       	ldi	r22, 0x01	; 1
    125e:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1262:	8e eb       	ldi	r24, 0xBE	; 190
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    126a:	80 e1       	ldi	r24, 0x10	; 16
    126c:	97 e2       	ldi	r25, 0x27	; 39
    126e:	28 ec       	ldi	r18, 0xC8	; 200
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	f9 01       	movw	r30, r18
    1274:	31 97       	sbiw	r30, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <admin+0x32>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1278:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    127a:	d9 f7       	brne	.-10     	; 0x1272 <admin+0x30>
	_delay_ms(1000);
	LCDClear();
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Press 2");
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	60 e0       	ldi	r22, 0x00	; 0
    1288:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    128c:	88 ec       	ldi	r24, 0xC8	; 200
    128e:	91 e0       	ldi	r25, 0x01	; 1
    1290:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(0,1,"Reset Passwords");
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	61 e0       	ldi	r22, 0x01	; 1
    1298:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    129c:	80 ed       	ldi	r24, 0xD0	; 208
    129e:	91 e0       	ldi	r25, 0x01	; 1
    12a0:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    12a4:	80 e1       	ldi	r24, 0x10	; 16
    12a6:	97 e2       	ldi	r25, 0x27	; 39
    12a8:	28 ec       	ldi	r18, 0xC8	; 200
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	f9 01       	movw	r30, r18
    12ae:	31 97       	sbiw	r30, 0x01	; 1
    12b0:	f1 f7       	brne	.-4      	; 0x12ae <admin+0x6c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b4:	d9 f7       	brne	.-10     	; 0x12ac <admin+0x6a>
	_delay_ms(1000);
	LCDWriteStringXY(0,0,"Press 3");
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    12be:	80 ee       	ldi	r24, 0xE0	; 224
    12c0:	91 e0       	ldi	r25, 0x01	; 1
    12c2:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(0,1,"Enroll New Card");
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	61 e0       	ldi	r22, 0x01	; 1
    12ca:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    12ce:	88 ee       	ldi	r24, 0xE8	; 232
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    12d6:	80 e1       	ldi	r24, 0x10	; 16
    12d8:	97 e2       	ldi	r25, 0x27	; 39
    12da:	28 ec       	ldi	r18, 0xC8	; 200
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	f9 01       	movw	r30, r18
    12e0:	31 97       	sbiw	r30, 0x01	; 1
    12e2:	f1 f7       	brne	.-4      	; 0x12e0 <admin+0x9e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	d9 f7       	brne	.-10     	; 0x12de <admin+0x9c>
	_delay_ms(1000);
	LCDClear();
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	60 e0       	ldi	r22, 0x00	; 0
    12ec:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(0,0,"Enter");
    12f0:	80 e0       	ldi	r24, 0x00	; 0
    12f2:	60 e0       	ldi	r22, 0x00	; 0
    12f4:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    12f8:	89 e6       	ldi	r24, 0x69	; 105
    12fa:	91 e0       	ldi	r25, 0x01	; 1
    12fc:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	
	while(1){
		key();
    1300:	0e 94 8e 02 	call	0x51c	; 0x51c <key>
		if(pw == '1'){
    1304:	80 91 d4 02 	lds	r24, 0x02D4
    1308:	81 33       	cpi	r24, 0x31	; 49
    130a:	c1 f4       	brne	.+48     	; 0x133c <admin+0xfa>
			LCDClear();
    130c:	81 e0       	ldi	r24, 0x01	; 1
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Open Door ");
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    131c:	88 ef       	ldi	r24, 0xF8	; 248
    131e:	91 e0       	ldi	r25, 0x01	; 1
    1320:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    1324:	80 e1       	ldi	r24, 0x10	; 16
    1326:	97 e2       	ldi	r25, 0x27	; 39
    1328:	28 ec       	ldi	r18, 0xC8	; 200
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	f9 01       	movw	r30, r18
    132e:	31 97       	sbiw	r30, 0x01	; 1
    1330:	f1 f7       	brne	.-4      	; 0x132e <admin+0xec>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1332:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1334:	d9 f7       	brne	.-10     	; 0x132c <admin+0xea>
			_delay_ms(1000);
			admin_check_password();
    1336:	0e 94 84 05 	call	0xb08	; 0xb08 <admin_check_password>
    133a:	08 95       	ret
			break;
		}else if(pw == '2'){
    133c:	82 33       	cpi	r24, 0x32	; 50
    133e:	c1 f4       	brne	.+48     	; 0x1370 <admin+0x12e>
			LCDClear();
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Reset Passwords ");
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    1358:	80 e1       	ldi	r24, 0x10	; 16
    135a:	97 e2       	ldi	r25, 0x27	; 39
    135c:	28 ec       	ldi	r18, 0xC8	; 200
    135e:	30 e0       	ldi	r19, 0x00	; 0
    1360:	f9 01       	movw	r30, r18
    1362:	31 97       	sbiw	r30, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <admin+0x120>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1366:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	d9 f7       	brne	.-10     	; 0x1360 <admin+0x11e>
			_delay_ms(1000);
			admin_reset();
    136a:	0e 94 b7 07 	call	0xf6e	; 0xf6e <admin_reset>
    136e:	08 95       	ret
			break;
		}else if (pw == '3'){
    1370:	83 33       	cpi	r24, 0x33	; 51
    1372:	09 f0       	breq	.+2      	; 0x1376 <admin+0x134>
    1374:	c5 cf       	rjmp	.-118    	; 0x1300 <admin+0xbe>
			LCDClear();
    1376:	81 e0       	ldi	r24, 0x01	; 1
    1378:	60 e0       	ldi	r22, 0x00	; 0
    137a:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
			LCDWriteStringXY(0,0,"Enroll New Card ");
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	60 e0       	ldi	r22, 0x00	; 0
    1382:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    1386:	84 e1       	ldi	r24, 0x14	; 20
    1388:	92 e0       	ldi	r25, 0x02	; 2
    138a:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    138e:	80 e1       	ldi	r24, 0x10	; 16
    1390:	97 e2       	ldi	r25, 0x27	; 39
    1392:	28 ec       	ldi	r18, 0xC8	; 200
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	f9 01       	movw	r30, r18
    1398:	31 97       	sbiw	r30, 0x01	; 1
    139a:	f1 f7       	brne	.-4      	; 0x1398 <admin+0x156>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    139c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139e:	d9 f7       	brne	.-10     	; 0x1396 <admin+0x154>
			_delay_ms(1000);
			enroll_new_card();
    13a0:	0e 94 a4 08 	call	0x1148	; 0x1148 <enroll_new_card>
			PORTA |= (1<<7);
    13a4:	df 9a       	sbi	0x1b, 7	; 27
    13a6:	88 ee       	ldi	r24, 0xE8	; 232
    13a8:	93 e0       	ldi	r25, 0x03	; 3
    13aa:	28 ec       	ldi	r18, 0xC8	; 200
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	f9 01       	movw	r30, r18
    13b0:	31 97       	sbiw	r30, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <admin+0x16e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b6:	d9 f7       	brne	.-10     	; 0x13ae <admin+0x16c>
			_delay_ms(100);
			PORTA &= ~(1<<7);
    13b8:	df 98       	cbi	0x1b, 7	; 27
    13ba:	08 95       	ret

000013bc <main>:
void user1_reset_password_check(void);
void user2_reset_password_check(void);
void newuser_reset_password_check(void);
void enroll_new_card(void);

int main(void){
    13bc:	cf 93       	push	r28
    13be:	df 93       	push	r29
	
	DDRA=0xff;
    13c0:	8f ef       	ldi	r24, 0xFF	; 255
    13c2:	8a bb       	out	0x1a, r24	; 26
	DDRD=0xff;
    13c4:	81 bb       	out	0x11, r24	; 17

	LCDInit(0);
    13c6:	80 e0       	ldi	r24, 0x00	; 0
    13c8:	0e 94 ab 01 	call	0x356	; 0x356 <LCDInit>
	LCDClear();
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
	LCDWriteStringXY(4,0,"Welcome");
    13d4:	84 e0       	ldi	r24, 0x04	; 4
    13d6:	60 e0       	ldi	r22, 0x00	; 0
    13d8:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    13dc:	85 e2       	ldi	r24, 0x25	; 37
    13de:	92 e0       	ldi	r25, 0x02	; 2
    13e0:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
	LCDWriteStringXY(1,1,"Embedded World");
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	61 e0       	ldi	r22, 0x01	; 1
    13e8:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    13ec:	8d e2       	ldi	r24, 0x2D	; 45
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
    13f4:	80 e1       	ldi	r24, 0x10	; 16
    13f6:	97 e2       	ldi	r25, 0x27	; 39
    13f8:	28 ec       	ldi	r18, 0xC8	; 200
    13fa:	30 e0       	ldi	r19, 0x00	; 0
    13fc:	f9 01       	movw	r30, r18
    13fe:	31 97       	sbiw	r30, 0x01	; 1
    1400:	f1 f7       	brne	.-4      	; 0x13fe <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1402:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1404:	d9 f7       	brne	.-10     	; 0x13fc <main+0x40>
    1406:	c8 ec       	ldi	r28, 0xC8	; 200
    1408:	d0 e0       	ldi	r29, 0x00	; 0
	_delay_ms(1000);
	
	while(1){
	
		i=0;
    140a:	10 92 c4 02 	sts	0x02C4, r1
		LCDClear();
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <LCDByte>
		LCDWriteStringXY(0,0," Show Your Card ");
    1416:	80 e0       	ldi	r24, 0x00	; 0
    1418:	60 e0       	ldi	r22, 0x00	; 0
    141a:	0e 94 99 01 	call	0x332	; 0x332 <LCDGotoXY>
    141e:	8c e3       	ldi	r24, 0x3C	; 60
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	0e 94 21 01 	call	0x242	; 0x242 <LCDWriteString>
		
		card_check();
    1426:	0e 94 ee 01 	call	0x3dc	; 0x3dc <card_check>
		
		if(card_num==1){
    142a:	80 91 c5 02 	lds	r24, 0x02C5
    142e:	81 30       	cpi	r24, 0x01	; 1
    1430:	71 f4       	brne	.+28     	; 0x144e <main+0x92>
			PORTA |= (1<<7);
    1432:	df 9a       	sbi	0x1b, 7	; 27
			PORTD |= (1<<4);
    1434:	94 9a       	sbi	0x12, 4	; 18
    1436:	88 ee       	ldi	r24, 0xE8	; 232
    1438:	93 e0       	ldi	r25, 0x03	; 3
    143a:	fe 01       	movw	r30, r28
    143c:	31 97       	sbiw	r30, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <main+0x80>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1440:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1442:	d9 f7       	brne	.-10     	; 0x143a <main+0x7e>
			_delay_ms(100);
			PORTA &= ~(1<<7);
    1444:	df 98       	cbi	0x1b, 7	; 27
			PORTD &= ~(1<<4);
    1446:	94 98       	cbi	0x12, 4	; 18
			admin();
    1448:	0e 94 21 09 	call	0x1242	; 0x1242 <admin>
    144c:	de cf       	rjmp	.-68     	; 0x140a <main+0x4e>
		}
		else if(card_num==2){;
    144e:	82 30       	cpi	r24, 0x02	; 2
    1450:	71 f4       	brne	.+28     	; 0x146e <main+0xb2>
			PORTA |= (1<<7);
    1452:	df 9a       	sbi	0x1b, 7	; 27
			PORTD |= (1<<5);
    1454:	95 9a       	sbi	0x12, 5	; 18
    1456:	88 ee       	ldi	r24, 0xE8	; 232
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	fe 01       	movw	r30, r28
    145c:	31 97       	sbiw	r30, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <main+0xa0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1462:	d9 f7       	brne	.-10     	; 0x145a <main+0x9e>
			_delay_ms(100);
			PORTA &= ~(1<<7);
    1464:	df 98       	cbi	0x1b, 7	; 27
			PORTD &= ~(1<<5);
    1466:	95 98       	cbi	0x12, 5	; 18
			user1();
    1468:	0e 94 37 04 	call	0x86e	; 0x86e <user1>
    146c:	ce cf       	rjmp	.-100    	; 0x140a <main+0x4e>
		}
		else if(card_num==3){
    146e:	83 30       	cpi	r24, 0x03	; 3
    1470:	71 f4       	brne	.+28     	; 0x148e <main+0xd2>
			PORTA |= (1<<7);
    1472:	df 9a       	sbi	0x1b, 7	; 27
			PORTD |= (1<<6);
    1474:	96 9a       	sbi	0x12, 6	; 18
    1476:	88 ee       	ldi	r24, 0xE8	; 232
    1478:	93 e0       	ldi	r25, 0x03	; 3
    147a:	fe 01       	movw	r30, r28
    147c:	31 97       	sbiw	r30, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <main+0xc0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1480:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1482:	d9 f7       	brne	.-10     	; 0x147a <main+0xbe>
			_delay_ms(100);
			PORTA &= ~(1<<7);
    1484:	df 98       	cbi	0x1b, 7	; 27
			PORTD &= ~(1<<6);
    1486:	96 98       	cbi	0x12, 6	; 18
			user2();
    1488:	0e 94 a6 04 	call	0x94c	; 0x94c <user2>
    148c:	be cf       	rjmp	.-132    	; 0x140a <main+0x4e>
		}
		else if(card_num==4){
    148e:	84 30       	cpi	r24, 0x04	; 4
    1490:	09 f0       	breq	.+2      	; 0x1494 <main+0xd8>
    1492:	bb cf       	rjmp	.-138    	; 0x140a <main+0x4e>
			PORTA |= (1<<7);
    1494:	df 9a       	sbi	0x1b, 7	; 27
			PORTD |= (1<<7);
    1496:	97 9a       	sbi	0x12, 7	; 18
    1498:	88 ee       	ldi	r24, 0xE8	; 232
    149a:	93 e0       	ldi	r25, 0x03	; 3
    149c:	fe 01       	movw	r30, r28
    149e:	31 97       	sbiw	r30, 0x01	; 1
    14a0:	f1 f7       	brne	.-4      	; 0x149e <main+0xe2>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14a2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a4:	d9 f7       	brne	.-10     	; 0x149c <main+0xe0>
			_delay_ms(100);
			PORTA &= ~(1<<7);
    14a6:	df 98       	cbi	0x1b, 7	; 27
			PORTD &= ~(1<<7);
    14a8:	97 98       	cbi	0x12, 7	; 18
			newuser();
    14aa:	0e 94 15 05 	call	0xa2a	; 0xa2a <newuser>
    14ae:	ad cf       	rjmp	.-166    	; 0x140a <main+0x4e>

000014b0 <__divmodhi4>:
    14b0:	97 fb       	bst	r25, 7
    14b2:	09 2e       	mov	r0, r25
    14b4:	07 26       	eor	r0, r23
    14b6:	0a d0       	rcall	.+20     	; 0x14cc <__divmodhi4_neg1>
    14b8:	77 fd       	sbrc	r23, 7
    14ba:	04 d0       	rcall	.+8      	; 0x14c4 <__divmodhi4_neg2>
    14bc:	0c d0       	rcall	.+24     	; 0x14d6 <__udivmodhi4>
    14be:	06 d0       	rcall	.+12     	; 0x14cc <__divmodhi4_neg1>
    14c0:	00 20       	and	r0, r0
    14c2:	1a f4       	brpl	.+6      	; 0x14ca <__divmodhi4_exit>

000014c4 <__divmodhi4_neg2>:
    14c4:	70 95       	com	r23
    14c6:	61 95       	neg	r22
    14c8:	7f 4f       	sbci	r23, 0xFF	; 255

000014ca <__divmodhi4_exit>:
    14ca:	08 95       	ret

000014cc <__divmodhi4_neg1>:
    14cc:	f6 f7       	brtc	.-4      	; 0x14ca <__divmodhi4_exit>
    14ce:	90 95       	com	r25
    14d0:	81 95       	neg	r24
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	08 95       	ret

000014d6 <__udivmodhi4>:
    14d6:	aa 1b       	sub	r26, r26
    14d8:	bb 1b       	sub	r27, r27
    14da:	51 e1       	ldi	r21, 0x11	; 17
    14dc:	07 c0       	rjmp	.+14     	; 0x14ec <__udivmodhi4_ep>

000014de <__udivmodhi4_loop>:
    14de:	aa 1f       	adc	r26, r26
    14e0:	bb 1f       	adc	r27, r27
    14e2:	a6 17       	cp	r26, r22
    14e4:	b7 07       	cpc	r27, r23
    14e6:	10 f0       	brcs	.+4      	; 0x14ec <__udivmodhi4_ep>
    14e8:	a6 1b       	sub	r26, r22
    14ea:	b7 0b       	sbc	r27, r23

000014ec <__udivmodhi4_ep>:
    14ec:	88 1f       	adc	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	5a 95       	dec	r21
    14f2:	a9 f7       	brne	.-22     	; 0x14de <__udivmodhi4_loop>
    14f4:	80 95       	com	r24
    14f6:	90 95       	com	r25
    14f8:	bc 01       	movw	r22, r24
    14fa:	cd 01       	movw	r24, r26
    14fc:	08 95       	ret

000014fe <_exit>:
    14fe:	f8 94       	cli

00001500 <__stop_program>:
    1500:	ff cf       	rjmp	.-2      	; 0x1500 <__stop_program>
